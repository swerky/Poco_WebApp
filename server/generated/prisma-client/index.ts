// Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  absence: (where?: AbsenceWhereInput) => Promise<boolean>;
  socialAssistant: (where?: SocialAssistantWhereInput) => Promise<boolean>;
  student: (where?: StudentWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  absence: (where: AbsenceWhereUniqueInput) => AbsenceNullablePromise;
  absences: (args?: {
    where?: AbsenceWhereInput;
    orderBy?: AbsenceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Absence>;
  absencesConnection: (args?: {
    where?: AbsenceWhereInput;
    orderBy?: AbsenceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AbsenceConnectionPromise;
  socialAssistant: (
    where: SocialAssistantWhereUniqueInput
  ) => SocialAssistantNullablePromise;
  socialAssistants: (args?: {
    where?: SocialAssistantWhereInput;
    orderBy?: SocialAssistantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SocialAssistant>;
  socialAssistantsConnection: (args?: {
    where?: SocialAssistantWhereInput;
    orderBy?: SocialAssistantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SocialAssistantConnectionPromise;
  student: (where: StudentWhereUniqueInput) => StudentNullablePromise;
  students: (args?: {
    where?: StudentWhereInput;
    orderBy?: StudentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Student>;
  studentsConnection: (args?: {
    where?: StudentWhereInput;
    orderBy?: StudentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => StudentConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAbsence: (data: AbsenceCreateInput) => AbsencePromise;
  updateAbsence: (args: {
    data: AbsenceUpdateInput;
    where: AbsenceWhereUniqueInput;
  }) => AbsencePromise;
  updateManyAbsences: (args: {
    data: AbsenceUpdateManyMutationInput;
    where?: AbsenceWhereInput;
  }) => BatchPayloadPromise;
  upsertAbsence: (args: {
    where: AbsenceWhereUniqueInput;
    create: AbsenceCreateInput;
    update: AbsenceUpdateInput;
  }) => AbsencePromise;
  deleteAbsence: (where: AbsenceWhereUniqueInput) => AbsencePromise;
  deleteManyAbsences: (where?: AbsenceWhereInput) => BatchPayloadPromise;
  createSocialAssistant: (
    data: SocialAssistantCreateInput
  ) => SocialAssistantPromise;
  updateSocialAssistant: (args: {
    data: SocialAssistantUpdateInput;
    where: SocialAssistantWhereUniqueInput;
  }) => SocialAssistantPromise;
  updateManySocialAssistants: (args: {
    data: SocialAssistantUpdateManyMutationInput;
    where?: SocialAssistantWhereInput;
  }) => BatchPayloadPromise;
  upsertSocialAssistant: (args: {
    where: SocialAssistantWhereUniqueInput;
    create: SocialAssistantCreateInput;
    update: SocialAssistantUpdateInput;
  }) => SocialAssistantPromise;
  deleteSocialAssistant: (
    where: SocialAssistantWhereUniqueInput
  ) => SocialAssistantPromise;
  deleteManySocialAssistants: (
    where?: SocialAssistantWhereInput
  ) => BatchPayloadPromise;
  createStudent: (data: StudentCreateInput) => StudentPromise;
  updateStudent: (args: {
    data: StudentUpdateInput;
    where: StudentWhereUniqueInput;
  }) => StudentPromise;
  updateManyStudents: (args: {
    data: StudentUpdateManyMutationInput;
    where?: StudentWhereInput;
  }) => BatchPayloadPromise;
  upsertStudent: (args: {
    where: StudentWhereUniqueInput;
    create: StudentCreateInput;
    update: StudentUpdateInput;
  }) => StudentPromise;
  deleteStudent: (where: StudentWhereUniqueInput) => StudentPromise;
  deleteManyStudents: (where?: StudentWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  absence: (
    where?: AbsenceSubscriptionWhereInput
  ) => AbsenceSubscriptionPayloadSubscription;
  socialAssistant: (
    where?: SocialAssistantSubscriptionWhereInput
  ) => SocialAssistantSubscriptionPayloadSubscription;
  student: (
    where?: StudentSubscriptionWhereInput
  ) => StudentSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type AbsenceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "date_ASC"
  | "date_DESC"
  | "timeMissed_ASC"
  | "timeMissed_DESC"
  | "goodExcuse_ASC"
  | "goodExcuse_DESC"
  | "reason_ASC"
  | "reason_DESC";

export type SocialAssistantOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "email_ASC"
  | "email_DESC";

export type Sexe = "MALE" | "FEMAIL" | "OTHER";

export type FinancialParticipation = "YES" | "NO" | "EXTERN" | "OTHER";

export type StudentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "sexe_ASC"
  | "sexe_DESC"
  | "privateEmail_ASC"
  | "privateEmail_DESC"
  | "pocoEmail_ASC"
  | "pocoEmail_DESC"
  | "residencePermit_ASC"
  | "residencePermit_DESC"
  | "birthday_ASC"
  | "birthday_DESC"
  | "nationality_ASC"
  | "nationality_DESC"
  | "addressStreet_ASC"
  | "addressStreet_DESC"
  | "addressCity_ASC"
  | "addressCity_DESC"
  | "addressNPA_ASC"
  | "addressNPA_DESC"
  | "addressCanton_ASC"
  | "addressCanton_DESC"
  | "organisation_ASC"
  | "organisation_DESC"
  | "financialParticipation_ASC"
  | "financialParticipation_DESC"
  | "financialParticipationComment_ASC"
  | "financialParticipationComment_DESC"
  | "borrowLaptops_ASC"
  | "borrowLaptops_DESC"
  | "FoodCost_ASC"
  | "FoodCost_DESC"
  | "createDate_ASC"
  | "createDate_DESC"
  | "updateDate_ASC"
  | "updateDate_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface AbsenceUpdateInput {
  date?: Maybe<DateTimeInput>;
  timeMissed?: Maybe<DateTimeInput>;
  goodExcuse?: Maybe<Boolean>;
  reason?: Maybe<String>;
}

export type AbsenceWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AbsenceUpdateWithWhereUniqueNestedInput {
  where: AbsenceWhereUniqueInput;
  data: AbsenceUpdateDataInput;
}

export interface SocialAssistantUpdateManyMutationInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
}

export interface StudentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  sexe?: Maybe<Sexe>;
  sexe_not?: Maybe<Sexe>;
  sexe_in?: Maybe<Sexe[] | Sexe>;
  sexe_not_in?: Maybe<Sexe[] | Sexe>;
  privateEmail?: Maybe<String>;
  privateEmail_not?: Maybe<String>;
  privateEmail_in?: Maybe<String[] | String>;
  privateEmail_not_in?: Maybe<String[] | String>;
  privateEmail_lt?: Maybe<String>;
  privateEmail_lte?: Maybe<String>;
  privateEmail_gt?: Maybe<String>;
  privateEmail_gte?: Maybe<String>;
  privateEmail_contains?: Maybe<String>;
  privateEmail_not_contains?: Maybe<String>;
  privateEmail_starts_with?: Maybe<String>;
  privateEmail_not_starts_with?: Maybe<String>;
  privateEmail_ends_with?: Maybe<String>;
  privateEmail_not_ends_with?: Maybe<String>;
  pocoEmail?: Maybe<String>;
  pocoEmail_not?: Maybe<String>;
  pocoEmail_in?: Maybe<String[] | String>;
  pocoEmail_not_in?: Maybe<String[] | String>;
  pocoEmail_lt?: Maybe<String>;
  pocoEmail_lte?: Maybe<String>;
  pocoEmail_gt?: Maybe<String>;
  pocoEmail_gte?: Maybe<String>;
  pocoEmail_contains?: Maybe<String>;
  pocoEmail_not_contains?: Maybe<String>;
  pocoEmail_starts_with?: Maybe<String>;
  pocoEmail_not_starts_with?: Maybe<String>;
  pocoEmail_ends_with?: Maybe<String>;
  pocoEmail_not_ends_with?: Maybe<String>;
  residencePermit?: Maybe<String>;
  residencePermit_not?: Maybe<String>;
  residencePermit_in?: Maybe<String[] | String>;
  residencePermit_not_in?: Maybe<String[] | String>;
  residencePermit_lt?: Maybe<String>;
  residencePermit_lte?: Maybe<String>;
  residencePermit_gt?: Maybe<String>;
  residencePermit_gte?: Maybe<String>;
  residencePermit_contains?: Maybe<String>;
  residencePermit_not_contains?: Maybe<String>;
  residencePermit_starts_with?: Maybe<String>;
  residencePermit_not_starts_with?: Maybe<String>;
  residencePermit_ends_with?: Maybe<String>;
  residencePermit_not_ends_with?: Maybe<String>;
  birthday?: Maybe<DateTimeInput>;
  birthday_not?: Maybe<DateTimeInput>;
  birthday_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthday_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthday_lt?: Maybe<DateTimeInput>;
  birthday_lte?: Maybe<DateTimeInput>;
  birthday_gt?: Maybe<DateTimeInput>;
  birthday_gte?: Maybe<DateTimeInput>;
  nationality?: Maybe<String>;
  nationality_not?: Maybe<String>;
  nationality_in?: Maybe<String[] | String>;
  nationality_not_in?: Maybe<String[] | String>;
  nationality_lt?: Maybe<String>;
  nationality_lte?: Maybe<String>;
  nationality_gt?: Maybe<String>;
  nationality_gte?: Maybe<String>;
  nationality_contains?: Maybe<String>;
  nationality_not_contains?: Maybe<String>;
  nationality_starts_with?: Maybe<String>;
  nationality_not_starts_with?: Maybe<String>;
  nationality_ends_with?: Maybe<String>;
  nationality_not_ends_with?: Maybe<String>;
  addressStreet?: Maybe<String>;
  addressStreet_not?: Maybe<String>;
  addressStreet_in?: Maybe<String[] | String>;
  addressStreet_not_in?: Maybe<String[] | String>;
  addressStreet_lt?: Maybe<String>;
  addressStreet_lte?: Maybe<String>;
  addressStreet_gt?: Maybe<String>;
  addressStreet_gte?: Maybe<String>;
  addressStreet_contains?: Maybe<String>;
  addressStreet_not_contains?: Maybe<String>;
  addressStreet_starts_with?: Maybe<String>;
  addressStreet_not_starts_with?: Maybe<String>;
  addressStreet_ends_with?: Maybe<String>;
  addressStreet_not_ends_with?: Maybe<String>;
  addressCity?: Maybe<String>;
  addressCity_not?: Maybe<String>;
  addressCity_in?: Maybe<String[] | String>;
  addressCity_not_in?: Maybe<String[] | String>;
  addressCity_lt?: Maybe<String>;
  addressCity_lte?: Maybe<String>;
  addressCity_gt?: Maybe<String>;
  addressCity_gte?: Maybe<String>;
  addressCity_contains?: Maybe<String>;
  addressCity_not_contains?: Maybe<String>;
  addressCity_starts_with?: Maybe<String>;
  addressCity_not_starts_with?: Maybe<String>;
  addressCity_ends_with?: Maybe<String>;
  addressCity_not_ends_with?: Maybe<String>;
  addressNPA?: Maybe<String>;
  addressNPA_not?: Maybe<String>;
  addressNPA_in?: Maybe<String[] | String>;
  addressNPA_not_in?: Maybe<String[] | String>;
  addressNPA_lt?: Maybe<String>;
  addressNPA_lte?: Maybe<String>;
  addressNPA_gt?: Maybe<String>;
  addressNPA_gte?: Maybe<String>;
  addressNPA_contains?: Maybe<String>;
  addressNPA_not_contains?: Maybe<String>;
  addressNPA_starts_with?: Maybe<String>;
  addressNPA_not_starts_with?: Maybe<String>;
  addressNPA_ends_with?: Maybe<String>;
  addressNPA_not_ends_with?: Maybe<String>;
  addressCanton?: Maybe<String>;
  addressCanton_not?: Maybe<String>;
  addressCanton_in?: Maybe<String[] | String>;
  addressCanton_not_in?: Maybe<String[] | String>;
  addressCanton_lt?: Maybe<String>;
  addressCanton_lte?: Maybe<String>;
  addressCanton_gt?: Maybe<String>;
  addressCanton_gte?: Maybe<String>;
  addressCanton_contains?: Maybe<String>;
  addressCanton_not_contains?: Maybe<String>;
  addressCanton_starts_with?: Maybe<String>;
  addressCanton_not_starts_with?: Maybe<String>;
  addressCanton_ends_with?: Maybe<String>;
  addressCanton_not_ends_with?: Maybe<String>;
  organisation?: Maybe<String>;
  organisation_not?: Maybe<String>;
  organisation_in?: Maybe<String[] | String>;
  organisation_not_in?: Maybe<String[] | String>;
  organisation_lt?: Maybe<String>;
  organisation_lte?: Maybe<String>;
  organisation_gt?: Maybe<String>;
  organisation_gte?: Maybe<String>;
  organisation_contains?: Maybe<String>;
  organisation_not_contains?: Maybe<String>;
  organisation_starts_with?: Maybe<String>;
  organisation_not_starts_with?: Maybe<String>;
  organisation_ends_with?: Maybe<String>;
  organisation_not_ends_with?: Maybe<String>;
  socialAssistant?: Maybe<SocialAssistantWhereInput>;
  financialParticipation?: Maybe<FinancialParticipation>;
  financialParticipation_not?: Maybe<FinancialParticipation>;
  financialParticipation_in?: Maybe<
    FinancialParticipation[] | FinancialParticipation
  >;
  financialParticipation_not_in?: Maybe<
    FinancialParticipation[] | FinancialParticipation
  >;
  financialParticipationComment?: Maybe<String>;
  financialParticipationComment_not?: Maybe<String>;
  financialParticipationComment_in?: Maybe<String[] | String>;
  financialParticipationComment_not_in?: Maybe<String[] | String>;
  financialParticipationComment_lt?: Maybe<String>;
  financialParticipationComment_lte?: Maybe<String>;
  financialParticipationComment_gt?: Maybe<String>;
  financialParticipationComment_gte?: Maybe<String>;
  financialParticipationComment_contains?: Maybe<String>;
  financialParticipationComment_not_contains?: Maybe<String>;
  financialParticipationComment_starts_with?: Maybe<String>;
  financialParticipationComment_not_starts_with?: Maybe<String>;
  financialParticipationComment_ends_with?: Maybe<String>;
  financialParticipationComment_not_ends_with?: Maybe<String>;
  borrowLaptops?: Maybe<Boolean>;
  borrowLaptops_not?: Maybe<Boolean>;
  FoodCost?: Maybe<String>;
  FoodCost_not?: Maybe<String>;
  FoodCost_in?: Maybe<String[] | String>;
  FoodCost_not_in?: Maybe<String[] | String>;
  FoodCost_lt?: Maybe<String>;
  FoodCost_lte?: Maybe<String>;
  FoodCost_gt?: Maybe<String>;
  FoodCost_gte?: Maybe<String>;
  FoodCost_contains?: Maybe<String>;
  FoodCost_not_contains?: Maybe<String>;
  FoodCost_starts_with?: Maybe<String>;
  FoodCost_not_starts_with?: Maybe<String>;
  FoodCost_ends_with?: Maybe<String>;
  FoodCost_not_ends_with?: Maybe<String>;
  absences_every?: Maybe<AbsenceWhereInput>;
  absences_some?: Maybe<AbsenceWhereInput>;
  absences_none?: Maybe<AbsenceWhereInput>;
  createDate?: Maybe<DateTimeInput>;
  createDate_not?: Maybe<DateTimeInput>;
  createDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createDate_lt?: Maybe<DateTimeInput>;
  createDate_lte?: Maybe<DateTimeInput>;
  createDate_gt?: Maybe<DateTimeInput>;
  createDate_gte?: Maybe<DateTimeInput>;
  updateDate?: Maybe<DateTimeInput>;
  updateDate_not?: Maybe<DateTimeInput>;
  updateDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updateDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updateDate_lt?: Maybe<DateTimeInput>;
  updateDate_lte?: Maybe<DateTimeInput>;
  updateDate_gt?: Maybe<DateTimeInput>;
  updateDate_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<StudentWhereInput[] | StudentWhereInput>;
  OR?: Maybe<StudentWhereInput[] | StudentWhereInput>;
  NOT?: Maybe<StudentWhereInput[] | StudentWhereInput>;
}

export interface SocialAssistantCreateInput {
  id?: Maybe<ID_Input>;
  firstName: String;
  lastName: String;
  phone?: Maybe<String>;
  email?: Maybe<String>;
}

export interface AbsenceUpdateManyInput {
  create?: Maybe<AbsenceCreateInput[] | AbsenceCreateInput>;
  update?: Maybe<
    | AbsenceUpdateWithWhereUniqueNestedInput[]
    | AbsenceUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | AbsenceUpsertWithWhereUniqueNestedInput[]
    | AbsenceUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<AbsenceWhereUniqueInput[] | AbsenceWhereUniqueInput>;
  connect?: Maybe<AbsenceWhereUniqueInput[] | AbsenceWhereUniqueInput>;
  set?: Maybe<AbsenceWhereUniqueInput[] | AbsenceWhereUniqueInput>;
  disconnect?: Maybe<AbsenceWhereUniqueInput[] | AbsenceWhereUniqueInput>;
  deleteMany?: Maybe<AbsenceScalarWhereInput[] | AbsenceScalarWhereInput>;
  updateMany?: Maybe<
    | AbsenceUpdateManyWithWhereNestedInput[]
    | AbsenceUpdateManyWithWhereNestedInput
  >;
}

export interface SocialAssistantSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SocialAssistantWhereInput>;
  AND?: Maybe<
    | SocialAssistantSubscriptionWhereInput[]
    | SocialAssistantSubscriptionWhereInput
  >;
  OR?: Maybe<
    | SocialAssistantSubscriptionWhereInput[]
    | SocialAssistantSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | SocialAssistantSubscriptionWhereInput[]
    | SocialAssistantSubscriptionWhereInput
  >;
}

export interface SocialAssistantUpsertNestedInput {
  update: SocialAssistantUpdateDataInput;
  create: SocialAssistantCreateInput;
}

export type SocialAssistantWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface SocialAssistantUpdateDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
}

export interface SocialAssistantWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  AND?: Maybe<SocialAssistantWhereInput[] | SocialAssistantWhereInput>;
  OR?: Maybe<SocialAssistantWhereInput[] | SocialAssistantWhereInput>;
  NOT?: Maybe<SocialAssistantWhereInput[] | SocialAssistantWhereInput>;
}

export interface SocialAssistantUpdateOneInput {
  create?: Maybe<SocialAssistantCreateInput>;
  update?: Maybe<SocialAssistantUpdateDataInput>;
  upsert?: Maybe<SocialAssistantUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<SocialAssistantWhereUniqueInput>;
}

export interface AbsenceUpdateManyDataInput {
  date?: Maybe<DateTimeInput>;
  timeMissed?: Maybe<DateTimeInput>;
  goodExcuse?: Maybe<Boolean>;
  reason?: Maybe<String>;
}

export interface AbsenceScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  timeMissed?: Maybe<DateTimeInput>;
  timeMissed_not?: Maybe<DateTimeInput>;
  timeMissed_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  timeMissed_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  timeMissed_lt?: Maybe<DateTimeInput>;
  timeMissed_lte?: Maybe<DateTimeInput>;
  timeMissed_gt?: Maybe<DateTimeInput>;
  timeMissed_gte?: Maybe<DateTimeInput>;
  goodExcuse?: Maybe<Boolean>;
  goodExcuse_not?: Maybe<Boolean>;
  reason?: Maybe<String>;
  reason_not?: Maybe<String>;
  reason_in?: Maybe<String[] | String>;
  reason_not_in?: Maybe<String[] | String>;
  reason_lt?: Maybe<String>;
  reason_lte?: Maybe<String>;
  reason_gt?: Maybe<String>;
  reason_gte?: Maybe<String>;
  reason_contains?: Maybe<String>;
  reason_not_contains?: Maybe<String>;
  reason_starts_with?: Maybe<String>;
  reason_not_starts_with?: Maybe<String>;
  reason_ends_with?: Maybe<String>;
  reason_not_ends_with?: Maybe<String>;
  AND?: Maybe<AbsenceScalarWhereInput[] | AbsenceScalarWhereInput>;
  OR?: Maybe<AbsenceScalarWhereInput[] | AbsenceScalarWhereInput>;
  NOT?: Maybe<AbsenceScalarWhereInput[] | AbsenceScalarWhereInput>;
}

export interface AbsenceUpsertWithWhereUniqueNestedInput {
  where: AbsenceWhereUniqueInput;
  update: AbsenceUpdateDataInput;
  create: AbsenceCreateInput;
}

export interface AbsenceCreateInput {
  id?: Maybe<ID_Input>;
  date: DateTimeInput;
  timeMissed: DateTimeInput;
  goodExcuse: Boolean;
  reason?: Maybe<String>;
}

export interface StudentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<StudentWhereInput>;
  AND?: Maybe<StudentSubscriptionWhereInput[] | StudentSubscriptionWhereInput>;
  OR?: Maybe<StudentSubscriptionWhereInput[] | StudentSubscriptionWhereInput>;
  NOT?: Maybe<StudentSubscriptionWhereInput[] | StudentSubscriptionWhereInput>;
}

export interface StudentUpdateInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  sexe?: Maybe<Sexe>;
  privateEmail?: Maybe<String>;
  pocoEmail?: Maybe<String>;
  residencePermit?: Maybe<String>;
  birthday?: Maybe<DateTimeInput>;
  nationality?: Maybe<String>;
  addressStreet?: Maybe<String>;
  addressCity?: Maybe<String>;
  addressNPA?: Maybe<String>;
  addressCanton?: Maybe<String>;
  organisation?: Maybe<String>;
  socialAssistant?: Maybe<SocialAssistantUpdateOneInput>;
  financialParticipation?: Maybe<FinancialParticipation>;
  financialParticipationComment?: Maybe<String>;
  borrowLaptops?: Maybe<Boolean>;
  FoodCost?: Maybe<String>;
  absences?: Maybe<AbsenceUpdateManyInput>;
  createDate?: Maybe<DateTimeInput>;
  updateDate?: Maybe<DateTimeInput>;
}

export interface StudentUpdateManyMutationInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  sexe?: Maybe<Sexe>;
  privateEmail?: Maybe<String>;
  pocoEmail?: Maybe<String>;
  residencePermit?: Maybe<String>;
  birthday?: Maybe<DateTimeInput>;
  nationality?: Maybe<String>;
  addressStreet?: Maybe<String>;
  addressCity?: Maybe<String>;
  addressNPA?: Maybe<String>;
  addressCanton?: Maybe<String>;
  organisation?: Maybe<String>;
  financialParticipation?: Maybe<FinancialParticipation>;
  financialParticipationComment?: Maybe<String>;
  borrowLaptops?: Maybe<Boolean>;
  FoodCost?: Maybe<String>;
  createDate?: Maybe<DateTimeInput>;
  updateDate?: Maybe<DateTimeInput>;
}

export interface AbsenceUpdateManyMutationInput {
  date?: Maybe<DateTimeInput>;
  timeMissed?: Maybe<DateTimeInput>;
  goodExcuse?: Maybe<Boolean>;
  reason?: Maybe<String>;
}

export interface AbsenceUpdateManyWithWhereNestedInput {
  where: AbsenceScalarWhereInput;
  data: AbsenceUpdateManyDataInput;
}

export interface SocialAssistantUpdateInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
}

export interface StudentCreateInput {
  id?: Maybe<ID_Input>;
  firstName: String;
  lastName: String;
  sexe: Sexe;
  privateEmail?: Maybe<String>;
  pocoEmail?: Maybe<String>;
  residencePermit: String;
  birthday: DateTimeInput;
  nationality: String;
  addressStreet: String;
  addressCity: String;
  addressNPA: String;
  addressCanton: String;
  organisation?: Maybe<String>;
  socialAssistant?: Maybe<SocialAssistantCreateOneInput>;
  financialParticipation: FinancialParticipation;
  financialParticipationComment?: Maybe<String>;
  borrowLaptops: Boolean;
  FoodCost?: Maybe<String>;
  absences?: Maybe<AbsenceCreateManyInput>;
  createDate: DateTimeInput;
  updateDate: DateTimeInput;
}

export interface SocialAssistantCreateOneInput {
  create?: Maybe<SocialAssistantCreateInput>;
  connect?: Maybe<SocialAssistantWhereUniqueInput>;
}

export interface AbsenceCreateManyInput {
  create?: Maybe<AbsenceCreateInput[] | AbsenceCreateInput>;
  connect?: Maybe<AbsenceWhereUniqueInput[] | AbsenceWhereUniqueInput>;
}

export type StudentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AbsenceWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  timeMissed?: Maybe<DateTimeInput>;
  timeMissed_not?: Maybe<DateTimeInput>;
  timeMissed_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  timeMissed_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  timeMissed_lt?: Maybe<DateTimeInput>;
  timeMissed_lte?: Maybe<DateTimeInput>;
  timeMissed_gt?: Maybe<DateTimeInput>;
  timeMissed_gte?: Maybe<DateTimeInput>;
  goodExcuse?: Maybe<Boolean>;
  goodExcuse_not?: Maybe<Boolean>;
  reason?: Maybe<String>;
  reason_not?: Maybe<String>;
  reason_in?: Maybe<String[] | String>;
  reason_not_in?: Maybe<String[] | String>;
  reason_lt?: Maybe<String>;
  reason_lte?: Maybe<String>;
  reason_gt?: Maybe<String>;
  reason_gte?: Maybe<String>;
  reason_contains?: Maybe<String>;
  reason_not_contains?: Maybe<String>;
  reason_starts_with?: Maybe<String>;
  reason_not_starts_with?: Maybe<String>;
  reason_ends_with?: Maybe<String>;
  reason_not_ends_with?: Maybe<String>;
  AND?: Maybe<AbsenceWhereInput[] | AbsenceWhereInput>;
  OR?: Maybe<AbsenceWhereInput[] | AbsenceWhereInput>;
  NOT?: Maybe<AbsenceWhereInput[] | AbsenceWhereInput>;
}

export interface AbsenceSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AbsenceWhereInput>;
  AND?: Maybe<AbsenceSubscriptionWhereInput[] | AbsenceSubscriptionWhereInput>;
  OR?: Maybe<AbsenceSubscriptionWhereInput[] | AbsenceSubscriptionWhereInput>;
  NOT?: Maybe<AbsenceSubscriptionWhereInput[] | AbsenceSubscriptionWhereInput>;
}

export interface AbsenceUpdateDataInput {
  date?: Maybe<DateTimeInput>;
  timeMissed?: Maybe<DateTimeInput>;
  goodExcuse?: Maybe<Boolean>;
  reason?: Maybe<String>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface StudentPreviousValues {
  id: ID_Output;
  firstName: String;
  lastName: String;
  sexe: Sexe;
  privateEmail?: String;
  pocoEmail?: String;
  residencePermit: String;
  birthday: DateTimeOutput;
  nationality: String;
  addressStreet: String;
  addressCity: String;
  addressNPA: String;
  addressCanton: String;
  organisation?: String;
  financialParticipation: FinancialParticipation;
  financialParticipationComment?: String;
  borrowLaptops: Boolean;
  FoodCost?: String;
  createDate: DateTimeOutput;
  updateDate: DateTimeOutput;
}

export interface StudentPreviousValuesPromise
  extends Promise<StudentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  sexe: () => Promise<Sexe>;
  privateEmail: () => Promise<String>;
  pocoEmail: () => Promise<String>;
  residencePermit: () => Promise<String>;
  birthday: () => Promise<DateTimeOutput>;
  nationality: () => Promise<String>;
  addressStreet: () => Promise<String>;
  addressCity: () => Promise<String>;
  addressNPA: () => Promise<String>;
  addressCanton: () => Promise<String>;
  organisation: () => Promise<String>;
  financialParticipation: () => Promise<FinancialParticipation>;
  financialParticipationComment: () => Promise<String>;
  borrowLaptops: () => Promise<Boolean>;
  FoodCost: () => Promise<String>;
  createDate: () => Promise<DateTimeOutput>;
  updateDate: () => Promise<DateTimeOutput>;
}

export interface StudentPreviousValuesSubscription
  extends Promise<AsyncIterator<StudentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  sexe: () => Promise<AsyncIterator<Sexe>>;
  privateEmail: () => Promise<AsyncIterator<String>>;
  pocoEmail: () => Promise<AsyncIterator<String>>;
  residencePermit: () => Promise<AsyncIterator<String>>;
  birthday: () => Promise<AsyncIterator<DateTimeOutput>>;
  nationality: () => Promise<AsyncIterator<String>>;
  addressStreet: () => Promise<AsyncIterator<String>>;
  addressCity: () => Promise<AsyncIterator<String>>;
  addressNPA: () => Promise<AsyncIterator<String>>;
  addressCanton: () => Promise<AsyncIterator<String>>;
  organisation: () => Promise<AsyncIterator<String>>;
  financialParticipation: () => Promise<AsyncIterator<FinancialParticipation>>;
  financialParticipationComment: () => Promise<AsyncIterator<String>>;
  borrowLaptops: () => Promise<AsyncIterator<Boolean>>;
  FoodCost: () => Promise<AsyncIterator<String>>;
  createDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  updateDate: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SocialAssistantEdge {
  node: SocialAssistant;
  cursor: String;
}

export interface SocialAssistantEdgePromise
  extends Promise<SocialAssistantEdge>,
    Fragmentable {
  node: <T = SocialAssistantPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SocialAssistantEdgeSubscription
  extends Promise<AsyncIterator<SocialAssistantEdge>>,
    Fragmentable {
  node: <T = SocialAssistantSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AbsenceConnection {
  pageInfo: PageInfo;
  edges: AbsenceEdge[];
}

export interface AbsenceConnectionPromise
  extends Promise<AbsenceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AbsenceEdge>>() => T;
  aggregate: <T = AggregateAbsencePromise>() => T;
}

export interface AbsenceConnectionSubscription
  extends Promise<AsyncIterator<AbsenceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AbsenceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAbsenceSubscription>() => T;
}

export interface SocialAssistantConnection {
  pageInfo: PageInfo;
  edges: SocialAssistantEdge[];
}

export interface SocialAssistantConnectionPromise
  extends Promise<SocialAssistantConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SocialAssistantEdge>>() => T;
  aggregate: <T = AggregateSocialAssistantPromise>() => T;
}

export interface SocialAssistantConnectionSubscription
  extends Promise<AsyncIterator<SocialAssistantConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SocialAssistantEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSocialAssistantSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface SocialAssistant {
  id: ID_Output;
  firstName: String;
  lastName: String;
  phone?: String;
  email?: String;
}

export interface SocialAssistantPromise
  extends Promise<SocialAssistant>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
}

export interface SocialAssistantSubscription
  extends Promise<AsyncIterator<SocialAssistant>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface SocialAssistantNullablePromise
  extends Promise<SocialAssistant | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
}

export interface AggregateStudent {
  count: Int;
}

export interface AggregateStudentPromise
  extends Promise<AggregateStudent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStudentSubscription
  extends Promise<AsyncIterator<AggregateStudent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateAbsence {
  count: Int;
}

export interface AggregateAbsencePromise
  extends Promise<AggregateAbsence>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAbsenceSubscription
  extends Promise<AsyncIterator<AggregateAbsence>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StudentConnection {
  pageInfo: PageInfo;
  edges: StudentEdge[];
}

export interface StudentConnectionPromise
  extends Promise<StudentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StudentEdge>>() => T;
  aggregate: <T = AggregateStudentPromise>() => T;
}

export interface StudentConnectionSubscription
  extends Promise<AsyncIterator<StudentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StudentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStudentSubscription>() => T;
}

export interface StudentEdge {
  node: Student;
  cursor: String;
}

export interface StudentEdgePromise extends Promise<StudentEdge>, Fragmentable {
  node: <T = StudentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface StudentEdgeSubscription
  extends Promise<AsyncIterator<StudentEdge>>,
    Fragmentable {
  node: <T = StudentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AbsenceEdge {
  node: Absence;
  cursor: String;
}

export interface AbsenceEdgePromise extends Promise<AbsenceEdge>, Fragmentable {
  node: <T = AbsencePromise>() => T;
  cursor: () => Promise<String>;
}

export interface AbsenceEdgeSubscription
  extends Promise<AsyncIterator<AbsenceEdge>>,
    Fragmentable {
  node: <T = AbsenceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Absence {
  id: ID_Output;
  date: DateTimeOutput;
  timeMissed: DateTimeOutput;
  goodExcuse: Boolean;
  reason?: String;
}

export interface AbsencePromise extends Promise<Absence>, Fragmentable {
  id: () => Promise<ID_Output>;
  date: () => Promise<DateTimeOutput>;
  timeMissed: () => Promise<DateTimeOutput>;
  goodExcuse: () => Promise<Boolean>;
  reason: () => Promise<String>;
}

export interface AbsenceSubscription
  extends Promise<AsyncIterator<Absence>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  timeMissed: () => Promise<AsyncIterator<DateTimeOutput>>;
  goodExcuse: () => Promise<AsyncIterator<Boolean>>;
  reason: () => Promise<AsyncIterator<String>>;
}

export interface AbsenceNullablePromise
  extends Promise<Absence | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  date: () => Promise<DateTimeOutput>;
  timeMissed: () => Promise<DateTimeOutput>;
  goodExcuse: () => Promise<Boolean>;
  reason: () => Promise<String>;
}

export interface AbsencePreviousValues {
  id: ID_Output;
  date: DateTimeOutput;
  timeMissed: DateTimeOutput;
  goodExcuse: Boolean;
  reason?: String;
}

export interface AbsencePreviousValuesPromise
  extends Promise<AbsencePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  date: () => Promise<DateTimeOutput>;
  timeMissed: () => Promise<DateTimeOutput>;
  goodExcuse: () => Promise<Boolean>;
  reason: () => Promise<String>;
}

export interface AbsencePreviousValuesSubscription
  extends Promise<AsyncIterator<AbsencePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  timeMissed: () => Promise<AsyncIterator<DateTimeOutput>>;
  goodExcuse: () => Promise<AsyncIterator<Boolean>>;
  reason: () => Promise<AsyncIterator<String>>;
}

export interface AbsenceSubscriptionPayload {
  mutation: MutationType;
  node: Absence;
  updatedFields: String[];
  previousValues: AbsencePreviousValues;
}

export interface AbsenceSubscriptionPayloadPromise
  extends Promise<AbsenceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AbsencePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AbsencePreviousValuesPromise>() => T;
}

export interface AbsenceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AbsenceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AbsenceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AbsencePreviousValuesSubscription>() => T;
}

export interface SocialAssistantSubscriptionPayload {
  mutation: MutationType;
  node: SocialAssistant;
  updatedFields: String[];
  previousValues: SocialAssistantPreviousValues;
}

export interface SocialAssistantSubscriptionPayloadPromise
  extends Promise<SocialAssistantSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SocialAssistantPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SocialAssistantPreviousValuesPromise>() => T;
}

export interface SocialAssistantSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SocialAssistantSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SocialAssistantSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SocialAssistantPreviousValuesSubscription>() => T;
}

export interface SocialAssistantPreviousValues {
  id: ID_Output;
  firstName: String;
  lastName: String;
  phone?: String;
  email?: String;
}

export interface SocialAssistantPreviousValuesPromise
  extends Promise<SocialAssistantPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
}

export interface SocialAssistantPreviousValuesSubscription
  extends Promise<AsyncIterator<SocialAssistantPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface Student {
  id: ID_Output;
  firstName: String;
  lastName: String;
  sexe: Sexe;
  privateEmail?: String;
  pocoEmail?: String;
  residencePermit: String;
  birthday: DateTimeOutput;
  nationality: String;
  addressStreet: String;
  addressCity: String;
  addressNPA: String;
  addressCanton: String;
  organisation?: String;
  financialParticipation: FinancialParticipation;
  financialParticipationComment?: String;
  borrowLaptops: Boolean;
  FoodCost?: String;
  createDate: DateTimeOutput;
  updateDate: DateTimeOutput;
}

export interface StudentPromise extends Promise<Student>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  sexe: () => Promise<Sexe>;
  privateEmail: () => Promise<String>;
  pocoEmail: () => Promise<String>;
  residencePermit: () => Promise<String>;
  birthday: () => Promise<DateTimeOutput>;
  nationality: () => Promise<String>;
  addressStreet: () => Promise<String>;
  addressCity: () => Promise<String>;
  addressNPA: () => Promise<String>;
  addressCanton: () => Promise<String>;
  organisation: () => Promise<String>;
  socialAssistant: <T = SocialAssistantPromise>() => T;
  financialParticipation: () => Promise<FinancialParticipation>;
  financialParticipationComment: () => Promise<String>;
  borrowLaptops: () => Promise<Boolean>;
  FoodCost: () => Promise<String>;
  absences: <T = FragmentableArray<Absence>>(args?: {
    where?: AbsenceWhereInput;
    orderBy?: AbsenceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createDate: () => Promise<DateTimeOutput>;
  updateDate: () => Promise<DateTimeOutput>;
}

export interface StudentSubscription
  extends Promise<AsyncIterator<Student>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  sexe: () => Promise<AsyncIterator<Sexe>>;
  privateEmail: () => Promise<AsyncIterator<String>>;
  pocoEmail: () => Promise<AsyncIterator<String>>;
  residencePermit: () => Promise<AsyncIterator<String>>;
  birthday: () => Promise<AsyncIterator<DateTimeOutput>>;
  nationality: () => Promise<AsyncIterator<String>>;
  addressStreet: () => Promise<AsyncIterator<String>>;
  addressCity: () => Promise<AsyncIterator<String>>;
  addressNPA: () => Promise<AsyncIterator<String>>;
  addressCanton: () => Promise<AsyncIterator<String>>;
  organisation: () => Promise<AsyncIterator<String>>;
  socialAssistant: <T = SocialAssistantSubscription>() => T;
  financialParticipation: () => Promise<AsyncIterator<FinancialParticipation>>;
  financialParticipationComment: () => Promise<AsyncIterator<String>>;
  borrowLaptops: () => Promise<AsyncIterator<Boolean>>;
  FoodCost: () => Promise<AsyncIterator<String>>;
  absences: <T = Promise<AsyncIterator<AbsenceSubscription>>>(args?: {
    where?: AbsenceWhereInput;
    orderBy?: AbsenceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  updateDate: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface StudentNullablePromise
  extends Promise<Student | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  sexe: () => Promise<Sexe>;
  privateEmail: () => Promise<String>;
  pocoEmail: () => Promise<String>;
  residencePermit: () => Promise<String>;
  birthday: () => Promise<DateTimeOutput>;
  nationality: () => Promise<String>;
  addressStreet: () => Promise<String>;
  addressCity: () => Promise<String>;
  addressNPA: () => Promise<String>;
  addressCanton: () => Promise<String>;
  organisation: () => Promise<String>;
  socialAssistant: <T = SocialAssistantPromise>() => T;
  financialParticipation: () => Promise<FinancialParticipation>;
  financialParticipationComment: () => Promise<String>;
  borrowLaptops: () => Promise<Boolean>;
  FoodCost: () => Promise<String>;
  absences: <T = FragmentableArray<Absence>>(args?: {
    where?: AbsenceWhereInput;
    orderBy?: AbsenceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createDate: () => Promise<DateTimeOutput>;
  updateDate: () => Promise<DateTimeOutput>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface StudentSubscriptionPayload {
  mutation: MutationType;
  node: Student;
  updatedFields: String[];
  previousValues: StudentPreviousValues;
}

export interface StudentSubscriptionPayloadPromise
  extends Promise<StudentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StudentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StudentPreviousValuesPromise>() => T;
}

export interface StudentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StudentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StudentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StudentPreviousValuesSubscription>() => T;
}

export interface AggregateSocialAssistant {
  count: Int;
}

export interface AggregateSocialAssistantPromise
  extends Promise<AggregateSocialAssistant>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSocialAssistantSubscription
  extends Promise<AsyncIterator<AggregateSocialAssistant>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Student",
    embedded: false
  },
  {
    name: "SocialAssistant",
    embedded: false
  },
  {
    name: "FinancialParticipation",
    embedded: false
  },
  {
    name: "Sexe",
    embedded: false
  },
  {
    name: "Absence",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466/poco`
});
export const prisma = new Prisma();
