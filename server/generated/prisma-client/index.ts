// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  batch: (where?: BatchWhereInput) => Promise<boolean>;
  presence: (where?: PresenceWhereInput) => Promise<boolean>;
  socialAssistant: (where?: SocialAssistantWhereInput) => Promise<boolean>;
  student: (where?: StudentWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  batch: (where: BatchWhereUniqueInput) => BatchNullablePromise;
  batches: (args?: {
    where?: BatchWhereInput;
    orderBy?: BatchOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Batch>;
  batchesConnection: (args?: {
    where?: BatchWhereInput;
    orderBy?: BatchOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BatchConnectionPromise;
  presence: (where: PresenceWhereUniqueInput) => PresenceNullablePromise;
  presences: (args?: {
    where?: PresenceWhereInput;
    orderBy?: PresenceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Presence>;
  presencesConnection: (args?: {
    where?: PresenceWhereInput;
    orderBy?: PresenceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PresenceConnectionPromise;
  socialAssistant: (
    where: SocialAssistantWhereUniqueInput
  ) => SocialAssistantNullablePromise;
  socialAssistants: (args?: {
    where?: SocialAssistantWhereInput;
    orderBy?: SocialAssistantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SocialAssistant>;
  socialAssistantsConnection: (args?: {
    where?: SocialAssistantWhereInput;
    orderBy?: SocialAssistantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SocialAssistantConnectionPromise;
  student: (where: StudentWhereUniqueInput) => StudentNullablePromise;
  students: (args?: {
    where?: StudentWhereInput;
    orderBy?: StudentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Student>;
  studentsConnection: (args?: {
    where?: StudentWhereInput;
    orderBy?: StudentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => StudentConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBatch: (data: BatchCreateInput) => BatchPromise;
  updateBatch: (args: {
    data: BatchUpdateInput;
    where: BatchWhereUniqueInput;
  }) => BatchPromise;
  updateManyBatches: (args: {
    data: BatchUpdateManyMutationInput;
    where?: BatchWhereInput;
  }) => BatchPayloadPromise;
  upsertBatch: (args: {
    where: BatchWhereUniqueInput;
    create: BatchCreateInput;
    update: BatchUpdateInput;
  }) => BatchPromise;
  deleteBatch: (where: BatchWhereUniqueInput) => BatchPromise;
  deleteManyBatches: (where?: BatchWhereInput) => BatchPayloadPromise;
  createPresence: (data: PresenceCreateInput) => PresencePromise;
  updatePresence: (args: {
    data: PresenceUpdateInput;
    where: PresenceWhereUniqueInput;
  }) => PresencePromise;
  updateManyPresences: (args: {
    data: PresenceUpdateManyMutationInput;
    where?: PresenceWhereInput;
  }) => BatchPayloadPromise;
  upsertPresence: (args: {
    where: PresenceWhereUniqueInput;
    create: PresenceCreateInput;
    update: PresenceUpdateInput;
  }) => PresencePromise;
  deletePresence: (where: PresenceWhereUniqueInput) => PresencePromise;
  deleteManyPresences: (where?: PresenceWhereInput) => BatchPayloadPromise;
  createSocialAssistant: (
    data: SocialAssistantCreateInput
  ) => SocialAssistantPromise;
  updateSocialAssistant: (args: {
    data: SocialAssistantUpdateInput;
    where: SocialAssistantWhereUniqueInput;
  }) => SocialAssistantPromise;
  updateManySocialAssistants: (args: {
    data: SocialAssistantUpdateManyMutationInput;
    where?: SocialAssistantWhereInput;
  }) => BatchPayloadPromise;
  upsertSocialAssistant: (args: {
    where: SocialAssistantWhereUniqueInput;
    create: SocialAssistantCreateInput;
    update: SocialAssistantUpdateInput;
  }) => SocialAssistantPromise;
  deleteSocialAssistant: (
    where: SocialAssistantWhereUniqueInput
  ) => SocialAssistantPromise;
  deleteManySocialAssistants: (
    where?: SocialAssistantWhereInput
  ) => BatchPayloadPromise;
  createStudent: (data: StudentCreateInput) => StudentPromise;
  updateStudent: (args: {
    data: StudentUpdateInput;
    where: StudentWhereUniqueInput;
  }) => StudentPromise;
  updateManyStudents: (args: {
    data: StudentUpdateManyMutationInput;
    where?: StudentWhereInput;
  }) => BatchPayloadPromise;
  upsertStudent: (args: {
    where: StudentWhereUniqueInput;
    create: StudentCreateInput;
    update: StudentUpdateInput;
  }) => StudentPromise;
  deleteStudent: (where: StudentWhereUniqueInput) => StudentPromise;
  deleteManyStudents: (where?: StudentWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  batch: (
    where?: BatchSubscriptionWhereInput
  ) => BatchSubscriptionPayloadSubscription;
  presence: (
    where?: PresenceSubscriptionWhereInput
  ) => PresenceSubscriptionPayloadSubscription;
  socialAssistant: (
    where?: SocialAssistantSubscriptionWhereInput
  ) => SocialAssistantSubscriptionPayloadSubscription;
  student: (
    where?: StudentSubscriptionWhereInput
  ) => StudentSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type BatchOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "startingTime_ASC"
  | "startingTime_DESC"
  | "endTime_ASC"
  | "endTime_DESC";

export type Sexe = "MALE" | "FEMALE" | "OTHER";

export type FinancialParticipation = "YES" | "NO" | "EXTERN" | "OTHER";

export type PresenceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "dateStart_ASC"
  | "dateStart_DESC"
  | "dateEnd_ASC"
  | "dateEnd_DESC"
  | "goodExcuse_ASC"
  | "goodExcuse_DESC"
  | "reason_ASC"
  | "reason_DESC";

export type SocialAssistantOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "email_ASC"
  | "email_DESC";

export type StudentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "sexe_ASC"
  | "sexe_DESC"
  | "privateEmail_ASC"
  | "privateEmail_DESC"
  | "pocoEmail_ASC"
  | "pocoEmail_DESC"
  | "residencePermit_ASC"
  | "residencePermit_DESC"
  | "birthday_ASC"
  | "birthday_DESC"
  | "nationality_ASC"
  | "nationality_DESC"
  | "addressStreet_ASC"
  | "addressStreet_DESC"
  | "addressCity_ASC"
  | "addressCity_DESC"
  | "addressNPA_ASC"
  | "addressNPA_DESC"
  | "addressCanton_ASC"
  | "addressCanton_DESC"
  | "organisation_ASC"
  | "organisation_DESC"
  | "financialParticipation_ASC"
  | "financialParticipation_DESC"
  | "financialParticipationComment_ASC"
  | "financialParticipationComment_DESC"
  | "borrowLaptops_ASC"
  | "borrowLaptops_DESC"
  | "foodCost_ASC"
  | "foodCost_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type BatchWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface BatchWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  startingTime?: Maybe<DateTimeInput>;
  startingTime_not?: Maybe<DateTimeInput>;
  startingTime_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startingTime_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startingTime_lt?: Maybe<DateTimeInput>;
  startingTime_lte?: Maybe<DateTimeInput>;
  startingTime_gt?: Maybe<DateTimeInput>;
  startingTime_gte?: Maybe<DateTimeInput>;
  endTime?: Maybe<DateTimeInput>;
  endTime_not?: Maybe<DateTimeInput>;
  endTime_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endTime_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endTime_lt?: Maybe<DateTimeInput>;
  endTime_lte?: Maybe<DateTimeInput>;
  endTime_gt?: Maybe<DateTimeInput>;
  endTime_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<BatchWhereInput[] | BatchWhereInput>;
  OR?: Maybe<BatchWhereInput[] | BatchWhereInput>;
  NOT?: Maybe<BatchWhereInput[] | BatchWhereInput>;
}

export type PresenceWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PresenceWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  dateStart?: Maybe<DateTimeInput>;
  dateStart_not?: Maybe<DateTimeInput>;
  dateStart_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateStart_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateStart_lt?: Maybe<DateTimeInput>;
  dateStart_lte?: Maybe<DateTimeInput>;
  dateStart_gt?: Maybe<DateTimeInput>;
  dateStart_gte?: Maybe<DateTimeInput>;
  dateEnd?: Maybe<DateTimeInput>;
  dateEnd_not?: Maybe<DateTimeInput>;
  dateEnd_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateEnd_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateEnd_lt?: Maybe<DateTimeInput>;
  dateEnd_lte?: Maybe<DateTimeInput>;
  dateEnd_gt?: Maybe<DateTimeInput>;
  dateEnd_gte?: Maybe<DateTimeInput>;
  goodExcuse?: Maybe<Boolean>;
  goodExcuse_not?: Maybe<Boolean>;
  reason?: Maybe<String>;
  reason_not?: Maybe<String>;
  reason_in?: Maybe<String[] | String>;
  reason_not_in?: Maybe<String[] | String>;
  reason_lt?: Maybe<String>;
  reason_lte?: Maybe<String>;
  reason_gt?: Maybe<String>;
  reason_gte?: Maybe<String>;
  reason_contains?: Maybe<String>;
  reason_not_contains?: Maybe<String>;
  reason_starts_with?: Maybe<String>;
  reason_not_starts_with?: Maybe<String>;
  reason_ends_with?: Maybe<String>;
  reason_not_ends_with?: Maybe<String>;
  student?: Maybe<StudentWhereInput>;
  AND?: Maybe<PresenceWhereInput[] | PresenceWhereInput>;
  OR?: Maybe<PresenceWhereInput[] | PresenceWhereInput>;
  NOT?: Maybe<PresenceWhereInput[] | PresenceWhereInput>;
}

export interface StudentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  sexe?: Maybe<Sexe>;
  sexe_not?: Maybe<Sexe>;
  sexe_in?: Maybe<Sexe[] | Sexe>;
  sexe_not_in?: Maybe<Sexe[] | Sexe>;
  privateEmail?: Maybe<String>;
  privateEmail_not?: Maybe<String>;
  privateEmail_in?: Maybe<String[] | String>;
  privateEmail_not_in?: Maybe<String[] | String>;
  privateEmail_lt?: Maybe<String>;
  privateEmail_lte?: Maybe<String>;
  privateEmail_gt?: Maybe<String>;
  privateEmail_gte?: Maybe<String>;
  privateEmail_contains?: Maybe<String>;
  privateEmail_not_contains?: Maybe<String>;
  privateEmail_starts_with?: Maybe<String>;
  privateEmail_not_starts_with?: Maybe<String>;
  privateEmail_ends_with?: Maybe<String>;
  privateEmail_not_ends_with?: Maybe<String>;
  pocoEmail?: Maybe<String>;
  pocoEmail_not?: Maybe<String>;
  pocoEmail_in?: Maybe<String[] | String>;
  pocoEmail_not_in?: Maybe<String[] | String>;
  pocoEmail_lt?: Maybe<String>;
  pocoEmail_lte?: Maybe<String>;
  pocoEmail_gt?: Maybe<String>;
  pocoEmail_gte?: Maybe<String>;
  pocoEmail_contains?: Maybe<String>;
  pocoEmail_not_contains?: Maybe<String>;
  pocoEmail_starts_with?: Maybe<String>;
  pocoEmail_not_starts_with?: Maybe<String>;
  pocoEmail_ends_with?: Maybe<String>;
  pocoEmail_not_ends_with?: Maybe<String>;
  residencePermit?: Maybe<String>;
  residencePermit_not?: Maybe<String>;
  residencePermit_in?: Maybe<String[] | String>;
  residencePermit_not_in?: Maybe<String[] | String>;
  residencePermit_lt?: Maybe<String>;
  residencePermit_lte?: Maybe<String>;
  residencePermit_gt?: Maybe<String>;
  residencePermit_gte?: Maybe<String>;
  residencePermit_contains?: Maybe<String>;
  residencePermit_not_contains?: Maybe<String>;
  residencePermit_starts_with?: Maybe<String>;
  residencePermit_not_starts_with?: Maybe<String>;
  residencePermit_ends_with?: Maybe<String>;
  residencePermit_not_ends_with?: Maybe<String>;
  birthday?: Maybe<DateTimeInput>;
  birthday_not?: Maybe<DateTimeInput>;
  birthday_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthday_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthday_lt?: Maybe<DateTimeInput>;
  birthday_lte?: Maybe<DateTimeInput>;
  birthday_gt?: Maybe<DateTimeInput>;
  birthday_gte?: Maybe<DateTimeInput>;
  nationality?: Maybe<String>;
  nationality_not?: Maybe<String>;
  nationality_in?: Maybe<String[] | String>;
  nationality_not_in?: Maybe<String[] | String>;
  nationality_lt?: Maybe<String>;
  nationality_lte?: Maybe<String>;
  nationality_gt?: Maybe<String>;
  nationality_gte?: Maybe<String>;
  nationality_contains?: Maybe<String>;
  nationality_not_contains?: Maybe<String>;
  nationality_starts_with?: Maybe<String>;
  nationality_not_starts_with?: Maybe<String>;
  nationality_ends_with?: Maybe<String>;
  nationality_not_ends_with?: Maybe<String>;
  addressStreet?: Maybe<String>;
  addressStreet_not?: Maybe<String>;
  addressStreet_in?: Maybe<String[] | String>;
  addressStreet_not_in?: Maybe<String[] | String>;
  addressStreet_lt?: Maybe<String>;
  addressStreet_lte?: Maybe<String>;
  addressStreet_gt?: Maybe<String>;
  addressStreet_gte?: Maybe<String>;
  addressStreet_contains?: Maybe<String>;
  addressStreet_not_contains?: Maybe<String>;
  addressStreet_starts_with?: Maybe<String>;
  addressStreet_not_starts_with?: Maybe<String>;
  addressStreet_ends_with?: Maybe<String>;
  addressStreet_not_ends_with?: Maybe<String>;
  addressCity?: Maybe<String>;
  addressCity_not?: Maybe<String>;
  addressCity_in?: Maybe<String[] | String>;
  addressCity_not_in?: Maybe<String[] | String>;
  addressCity_lt?: Maybe<String>;
  addressCity_lte?: Maybe<String>;
  addressCity_gt?: Maybe<String>;
  addressCity_gte?: Maybe<String>;
  addressCity_contains?: Maybe<String>;
  addressCity_not_contains?: Maybe<String>;
  addressCity_starts_with?: Maybe<String>;
  addressCity_not_starts_with?: Maybe<String>;
  addressCity_ends_with?: Maybe<String>;
  addressCity_not_ends_with?: Maybe<String>;
  addressNPA?: Maybe<Int>;
  addressNPA_not?: Maybe<Int>;
  addressNPA_in?: Maybe<Int[] | Int>;
  addressNPA_not_in?: Maybe<Int[] | Int>;
  addressNPA_lt?: Maybe<Int>;
  addressNPA_lte?: Maybe<Int>;
  addressNPA_gt?: Maybe<Int>;
  addressNPA_gte?: Maybe<Int>;
  addressCanton?: Maybe<String>;
  addressCanton_not?: Maybe<String>;
  addressCanton_in?: Maybe<String[] | String>;
  addressCanton_not_in?: Maybe<String[] | String>;
  addressCanton_lt?: Maybe<String>;
  addressCanton_lte?: Maybe<String>;
  addressCanton_gt?: Maybe<String>;
  addressCanton_gte?: Maybe<String>;
  addressCanton_contains?: Maybe<String>;
  addressCanton_not_contains?: Maybe<String>;
  addressCanton_starts_with?: Maybe<String>;
  addressCanton_not_starts_with?: Maybe<String>;
  addressCanton_ends_with?: Maybe<String>;
  addressCanton_not_ends_with?: Maybe<String>;
  organisation?: Maybe<String>;
  organisation_not?: Maybe<String>;
  organisation_in?: Maybe<String[] | String>;
  organisation_not_in?: Maybe<String[] | String>;
  organisation_lt?: Maybe<String>;
  organisation_lte?: Maybe<String>;
  organisation_gt?: Maybe<String>;
  organisation_gte?: Maybe<String>;
  organisation_contains?: Maybe<String>;
  organisation_not_contains?: Maybe<String>;
  organisation_starts_with?: Maybe<String>;
  organisation_not_starts_with?: Maybe<String>;
  organisation_ends_with?: Maybe<String>;
  organisation_not_ends_with?: Maybe<String>;
  socialAssistant?: Maybe<SocialAssistantWhereInput>;
  financialParticipation?: Maybe<FinancialParticipation>;
  financialParticipation_not?: Maybe<FinancialParticipation>;
  financialParticipation_in?: Maybe<
    FinancialParticipation[] | FinancialParticipation
  >;
  financialParticipation_not_in?: Maybe<
    FinancialParticipation[] | FinancialParticipation
  >;
  financialParticipationComment?: Maybe<String>;
  financialParticipationComment_not?: Maybe<String>;
  financialParticipationComment_in?: Maybe<String[] | String>;
  financialParticipationComment_not_in?: Maybe<String[] | String>;
  financialParticipationComment_lt?: Maybe<String>;
  financialParticipationComment_lte?: Maybe<String>;
  financialParticipationComment_gt?: Maybe<String>;
  financialParticipationComment_gte?: Maybe<String>;
  financialParticipationComment_contains?: Maybe<String>;
  financialParticipationComment_not_contains?: Maybe<String>;
  financialParticipationComment_starts_with?: Maybe<String>;
  financialParticipationComment_not_starts_with?: Maybe<String>;
  financialParticipationComment_ends_with?: Maybe<String>;
  financialParticipationComment_not_ends_with?: Maybe<String>;
  borrowLaptops?: Maybe<Boolean>;
  borrowLaptops_not?: Maybe<Boolean>;
  foodCost?: Maybe<String>;
  foodCost_not?: Maybe<String>;
  foodCost_in?: Maybe<String[] | String>;
  foodCost_not_in?: Maybe<String[] | String>;
  foodCost_lt?: Maybe<String>;
  foodCost_lte?: Maybe<String>;
  foodCost_gt?: Maybe<String>;
  foodCost_gte?: Maybe<String>;
  foodCost_contains?: Maybe<String>;
  foodCost_not_contains?: Maybe<String>;
  foodCost_starts_with?: Maybe<String>;
  foodCost_not_starts_with?: Maybe<String>;
  foodCost_ends_with?: Maybe<String>;
  foodCost_not_ends_with?: Maybe<String>;
  presences_every?: Maybe<PresenceWhereInput>;
  presences_some?: Maybe<PresenceWhereInput>;
  presences_none?: Maybe<PresenceWhereInput>;
  batch?: Maybe<BatchWhereInput>;
  AND?: Maybe<StudentWhereInput[] | StudentWhereInput>;
  OR?: Maybe<StudentWhereInput[] | StudentWhereInput>;
  NOT?: Maybe<StudentWhereInput[] | StudentWhereInput>;
}

export interface SocialAssistantWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  AND?: Maybe<SocialAssistantWhereInput[] | SocialAssistantWhereInput>;
  OR?: Maybe<SocialAssistantWhereInput[] | SocialAssistantWhereInput>;
  NOT?: Maybe<SocialAssistantWhereInput[] | SocialAssistantWhereInput>;
}

export type SocialAssistantWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type StudentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface BatchCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  startingTime: DateTimeInput;
  endTime: DateTimeInput;
}

export interface BatchUpdateInput {
  name?: Maybe<String>;
  startingTime?: Maybe<DateTimeInput>;
  endTime?: Maybe<DateTimeInput>;
}

export interface BatchUpdateManyMutationInput {
  name?: Maybe<String>;
  startingTime?: Maybe<DateTimeInput>;
  endTime?: Maybe<DateTimeInput>;
}

export interface PresenceCreateInput {
  id?: Maybe<ID_Input>;
  dateStart: DateTimeInput;
  dateEnd: DateTimeInput;
  goodExcuse?: Maybe<Boolean>;
  reason?: Maybe<String>;
  student: StudentCreateOneWithoutPresencesInput;
}

export interface StudentCreateOneWithoutPresencesInput {
  create?: Maybe<StudentCreateWithoutPresencesInput>;
  connect?: Maybe<StudentWhereUniqueInput>;
}

export interface StudentCreateWithoutPresencesInput {
  id?: Maybe<ID_Input>;
  firstName: String;
  lastName: String;
  sexe: Sexe;
  privateEmail?: Maybe<String>;
  pocoEmail?: Maybe<String>;
  residencePermit: String;
  birthday: DateTimeInput;
  nationality: String;
  addressStreet: String;
  addressCity: String;
  addressNPA: Int;
  addressCanton: String;
  organisation?: Maybe<String>;
  socialAssistant?: Maybe<SocialAssistantCreateOneInput>;
  financialParticipation: FinancialParticipation;
  financialParticipationComment?: Maybe<String>;
  borrowLaptops: Boolean;
  foodCost?: Maybe<String>;
  batch: BatchCreateOneInput;
}

export interface SocialAssistantCreateOneInput {
  create?: Maybe<SocialAssistantCreateInput>;
  connect?: Maybe<SocialAssistantWhereUniqueInput>;
}

export interface SocialAssistantCreateInput {
  id?: Maybe<ID_Input>;
  firstName: String;
  lastName: String;
  phone?: Maybe<String>;
  email?: Maybe<String>;
}

export interface BatchCreateOneInput {
  create?: Maybe<BatchCreateInput>;
  connect?: Maybe<BatchWhereUniqueInput>;
}

export interface PresenceUpdateInput {
  dateStart?: Maybe<DateTimeInput>;
  dateEnd?: Maybe<DateTimeInput>;
  goodExcuse?: Maybe<Boolean>;
  reason?: Maybe<String>;
  student?: Maybe<StudentUpdateOneRequiredWithoutPresencesInput>;
}

export interface StudentUpdateOneRequiredWithoutPresencesInput {
  create?: Maybe<StudentCreateWithoutPresencesInput>;
  update?: Maybe<StudentUpdateWithoutPresencesDataInput>;
  upsert?: Maybe<StudentUpsertWithoutPresencesInput>;
  connect?: Maybe<StudentWhereUniqueInput>;
}

export interface StudentUpdateWithoutPresencesDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  sexe?: Maybe<Sexe>;
  privateEmail?: Maybe<String>;
  pocoEmail?: Maybe<String>;
  residencePermit?: Maybe<String>;
  birthday?: Maybe<DateTimeInput>;
  nationality?: Maybe<String>;
  addressStreet?: Maybe<String>;
  addressCity?: Maybe<String>;
  addressNPA?: Maybe<Int>;
  addressCanton?: Maybe<String>;
  organisation?: Maybe<String>;
  socialAssistant?: Maybe<SocialAssistantUpdateOneInput>;
  financialParticipation?: Maybe<FinancialParticipation>;
  financialParticipationComment?: Maybe<String>;
  borrowLaptops?: Maybe<Boolean>;
  foodCost?: Maybe<String>;
  batch?: Maybe<BatchUpdateOneRequiredInput>;
}

export interface SocialAssistantUpdateOneInput {
  create?: Maybe<SocialAssistantCreateInput>;
  update?: Maybe<SocialAssistantUpdateDataInput>;
  upsert?: Maybe<SocialAssistantUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<SocialAssistantWhereUniqueInput>;
}

export interface SocialAssistantUpdateDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
}

export interface SocialAssistantUpsertNestedInput {
  update: SocialAssistantUpdateDataInput;
  create: SocialAssistantCreateInput;
}

export interface BatchUpdateOneRequiredInput {
  create?: Maybe<BatchCreateInput>;
  update?: Maybe<BatchUpdateDataInput>;
  upsert?: Maybe<BatchUpsertNestedInput>;
  connect?: Maybe<BatchWhereUniqueInput>;
}

export interface BatchUpdateDataInput {
  name?: Maybe<String>;
  startingTime?: Maybe<DateTimeInput>;
  endTime?: Maybe<DateTimeInput>;
}

export interface BatchUpsertNestedInput {
  update: BatchUpdateDataInput;
  create: BatchCreateInput;
}

export interface StudentUpsertWithoutPresencesInput {
  update: StudentUpdateWithoutPresencesDataInput;
  create: StudentCreateWithoutPresencesInput;
}

export interface PresenceUpdateManyMutationInput {
  dateStart?: Maybe<DateTimeInput>;
  dateEnd?: Maybe<DateTimeInput>;
  goodExcuse?: Maybe<Boolean>;
  reason?: Maybe<String>;
}

export interface SocialAssistantUpdateInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
}

export interface SocialAssistantUpdateManyMutationInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
}

export interface StudentCreateInput {
  id?: Maybe<ID_Input>;
  firstName: String;
  lastName: String;
  sexe: Sexe;
  privateEmail?: Maybe<String>;
  pocoEmail?: Maybe<String>;
  residencePermit: String;
  birthday: DateTimeInput;
  nationality: String;
  addressStreet: String;
  addressCity: String;
  addressNPA: Int;
  addressCanton: String;
  organisation?: Maybe<String>;
  socialAssistant?: Maybe<SocialAssistantCreateOneInput>;
  financialParticipation: FinancialParticipation;
  financialParticipationComment?: Maybe<String>;
  borrowLaptops: Boolean;
  foodCost?: Maybe<String>;
  presences?: Maybe<PresenceCreateManyWithoutStudentInput>;
  batch: BatchCreateOneInput;
}

export interface PresenceCreateManyWithoutStudentInput {
  create?: Maybe<
    PresenceCreateWithoutStudentInput[] | PresenceCreateWithoutStudentInput
  >;
  connect?: Maybe<PresenceWhereUniqueInput[] | PresenceWhereUniqueInput>;
}

export interface PresenceCreateWithoutStudentInput {
  id?: Maybe<ID_Input>;
  dateStart: DateTimeInput;
  dateEnd: DateTimeInput;
  goodExcuse?: Maybe<Boolean>;
  reason?: Maybe<String>;
}

export interface StudentUpdateInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  sexe?: Maybe<Sexe>;
  privateEmail?: Maybe<String>;
  pocoEmail?: Maybe<String>;
  residencePermit?: Maybe<String>;
  birthday?: Maybe<DateTimeInput>;
  nationality?: Maybe<String>;
  addressStreet?: Maybe<String>;
  addressCity?: Maybe<String>;
  addressNPA?: Maybe<Int>;
  addressCanton?: Maybe<String>;
  organisation?: Maybe<String>;
  socialAssistant?: Maybe<SocialAssistantUpdateOneInput>;
  financialParticipation?: Maybe<FinancialParticipation>;
  financialParticipationComment?: Maybe<String>;
  borrowLaptops?: Maybe<Boolean>;
  foodCost?: Maybe<String>;
  presences?: Maybe<PresenceUpdateManyWithoutStudentInput>;
  batch?: Maybe<BatchUpdateOneRequiredInput>;
}

export interface PresenceUpdateManyWithoutStudentInput {
  create?: Maybe<
    PresenceCreateWithoutStudentInput[] | PresenceCreateWithoutStudentInput
  >;
  delete?: Maybe<PresenceWhereUniqueInput[] | PresenceWhereUniqueInput>;
  connect?: Maybe<PresenceWhereUniqueInput[] | PresenceWhereUniqueInput>;
  set?: Maybe<PresenceWhereUniqueInput[] | PresenceWhereUniqueInput>;
  disconnect?: Maybe<PresenceWhereUniqueInput[] | PresenceWhereUniqueInput>;
  update?: Maybe<
    | PresenceUpdateWithWhereUniqueWithoutStudentInput[]
    | PresenceUpdateWithWhereUniqueWithoutStudentInput
  >;
  upsert?: Maybe<
    | PresenceUpsertWithWhereUniqueWithoutStudentInput[]
    | PresenceUpsertWithWhereUniqueWithoutStudentInput
  >;
  deleteMany?: Maybe<PresenceScalarWhereInput[] | PresenceScalarWhereInput>;
  updateMany?: Maybe<
    | PresenceUpdateManyWithWhereNestedInput[]
    | PresenceUpdateManyWithWhereNestedInput
  >;
}

export interface PresenceUpdateWithWhereUniqueWithoutStudentInput {
  where: PresenceWhereUniqueInput;
  data: PresenceUpdateWithoutStudentDataInput;
}

export interface PresenceUpdateWithoutStudentDataInput {
  dateStart?: Maybe<DateTimeInput>;
  dateEnd?: Maybe<DateTimeInput>;
  goodExcuse?: Maybe<Boolean>;
  reason?: Maybe<String>;
}

export interface PresenceUpsertWithWhereUniqueWithoutStudentInput {
  where: PresenceWhereUniqueInput;
  update: PresenceUpdateWithoutStudentDataInput;
  create: PresenceCreateWithoutStudentInput;
}

export interface PresenceScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  dateStart?: Maybe<DateTimeInput>;
  dateStart_not?: Maybe<DateTimeInput>;
  dateStart_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateStart_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateStart_lt?: Maybe<DateTimeInput>;
  dateStart_lte?: Maybe<DateTimeInput>;
  dateStart_gt?: Maybe<DateTimeInput>;
  dateStart_gte?: Maybe<DateTimeInput>;
  dateEnd?: Maybe<DateTimeInput>;
  dateEnd_not?: Maybe<DateTimeInput>;
  dateEnd_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateEnd_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateEnd_lt?: Maybe<DateTimeInput>;
  dateEnd_lte?: Maybe<DateTimeInput>;
  dateEnd_gt?: Maybe<DateTimeInput>;
  dateEnd_gte?: Maybe<DateTimeInput>;
  goodExcuse?: Maybe<Boolean>;
  goodExcuse_not?: Maybe<Boolean>;
  reason?: Maybe<String>;
  reason_not?: Maybe<String>;
  reason_in?: Maybe<String[] | String>;
  reason_not_in?: Maybe<String[] | String>;
  reason_lt?: Maybe<String>;
  reason_lte?: Maybe<String>;
  reason_gt?: Maybe<String>;
  reason_gte?: Maybe<String>;
  reason_contains?: Maybe<String>;
  reason_not_contains?: Maybe<String>;
  reason_starts_with?: Maybe<String>;
  reason_not_starts_with?: Maybe<String>;
  reason_ends_with?: Maybe<String>;
  reason_not_ends_with?: Maybe<String>;
  AND?: Maybe<PresenceScalarWhereInput[] | PresenceScalarWhereInput>;
  OR?: Maybe<PresenceScalarWhereInput[] | PresenceScalarWhereInput>;
  NOT?: Maybe<PresenceScalarWhereInput[] | PresenceScalarWhereInput>;
}

export interface PresenceUpdateManyWithWhereNestedInput {
  where: PresenceScalarWhereInput;
  data: PresenceUpdateManyDataInput;
}

export interface PresenceUpdateManyDataInput {
  dateStart?: Maybe<DateTimeInput>;
  dateEnd?: Maybe<DateTimeInput>;
  goodExcuse?: Maybe<Boolean>;
  reason?: Maybe<String>;
}

export interface StudentUpdateManyMutationInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  sexe?: Maybe<Sexe>;
  privateEmail?: Maybe<String>;
  pocoEmail?: Maybe<String>;
  residencePermit?: Maybe<String>;
  birthday?: Maybe<DateTimeInput>;
  nationality?: Maybe<String>;
  addressStreet?: Maybe<String>;
  addressCity?: Maybe<String>;
  addressNPA?: Maybe<Int>;
  addressCanton?: Maybe<String>;
  organisation?: Maybe<String>;
  financialParticipation?: Maybe<FinancialParticipation>;
  financialParticipationComment?: Maybe<String>;
  borrowLaptops?: Maybe<Boolean>;
  foodCost?: Maybe<String>;
}

export interface BatchSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BatchWhereInput>;
  AND?: Maybe<BatchSubscriptionWhereInput[] | BatchSubscriptionWhereInput>;
  OR?: Maybe<BatchSubscriptionWhereInput[] | BatchSubscriptionWhereInput>;
  NOT?: Maybe<BatchSubscriptionWhereInput[] | BatchSubscriptionWhereInput>;
}

export interface PresenceSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PresenceWhereInput>;
  AND?: Maybe<
    PresenceSubscriptionWhereInput[] | PresenceSubscriptionWhereInput
  >;
  OR?: Maybe<PresenceSubscriptionWhereInput[] | PresenceSubscriptionWhereInput>;
  NOT?: Maybe<
    PresenceSubscriptionWhereInput[] | PresenceSubscriptionWhereInput
  >;
}

export interface SocialAssistantSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SocialAssistantWhereInput>;
  AND?: Maybe<
    | SocialAssistantSubscriptionWhereInput[]
    | SocialAssistantSubscriptionWhereInput
  >;
  OR?: Maybe<
    | SocialAssistantSubscriptionWhereInput[]
    | SocialAssistantSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | SocialAssistantSubscriptionWhereInput[]
    | SocialAssistantSubscriptionWhereInput
  >;
}

export interface StudentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<StudentWhereInput>;
  AND?: Maybe<StudentSubscriptionWhereInput[] | StudentSubscriptionWhereInput>;
  OR?: Maybe<StudentSubscriptionWhereInput[] | StudentSubscriptionWhereInput>;
  NOT?: Maybe<StudentSubscriptionWhereInput[] | StudentSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Batch {
  id: ID_Output;
  name: String;
  startingTime: DateTimeOutput;
  endTime: DateTimeOutput;
}

export interface BatchPromise extends Promise<Batch>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  startingTime: () => Promise<DateTimeOutput>;
  endTime: () => Promise<DateTimeOutput>;
}

export interface BatchSubscription
  extends Promise<AsyncIterator<Batch>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  startingTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  endTime: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface BatchNullablePromise
  extends Promise<Batch | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  startingTime: () => Promise<DateTimeOutput>;
  endTime: () => Promise<DateTimeOutput>;
}

export interface BatchConnection {
  pageInfo: PageInfo;
  edges: BatchEdge[];
}

export interface BatchConnectionPromise
  extends Promise<BatchConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BatchEdge>>() => T;
  aggregate: <T = AggregateBatchPromise>() => T;
}

export interface BatchConnectionSubscription
  extends Promise<AsyncIterator<BatchConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BatchEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBatchSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchEdge {
  node: Batch;
  cursor: String;
}

export interface BatchEdgePromise extends Promise<BatchEdge>, Fragmentable {
  node: <T = BatchPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BatchEdgeSubscription
  extends Promise<AsyncIterator<BatchEdge>>,
    Fragmentable {
  node: <T = BatchSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBatch {
  count: Int;
}

export interface AggregateBatchPromise
  extends Promise<AggregateBatch>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBatchSubscription
  extends Promise<AsyncIterator<AggregateBatch>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Presence {
  id: ID_Output;
  dateStart: DateTimeOutput;
  dateEnd: DateTimeOutput;
  goodExcuse?: Boolean;
  reason?: String;
}

export interface PresencePromise extends Promise<Presence>, Fragmentable {
  id: () => Promise<ID_Output>;
  dateStart: () => Promise<DateTimeOutput>;
  dateEnd: () => Promise<DateTimeOutput>;
  goodExcuse: () => Promise<Boolean>;
  reason: () => Promise<String>;
  student: <T = StudentPromise>() => T;
}

export interface PresenceSubscription
  extends Promise<AsyncIterator<Presence>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  dateStart: () => Promise<AsyncIterator<DateTimeOutput>>;
  dateEnd: () => Promise<AsyncIterator<DateTimeOutput>>;
  goodExcuse: () => Promise<AsyncIterator<Boolean>>;
  reason: () => Promise<AsyncIterator<String>>;
  student: <T = StudentSubscription>() => T;
}

export interface PresenceNullablePromise
  extends Promise<Presence | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  dateStart: () => Promise<DateTimeOutput>;
  dateEnd: () => Promise<DateTimeOutput>;
  goodExcuse: () => Promise<Boolean>;
  reason: () => Promise<String>;
  student: <T = StudentPromise>() => T;
}

export interface Student {
  id: ID_Output;
  firstName: String;
  lastName: String;
  sexe: Sexe;
  privateEmail?: String;
  pocoEmail?: String;
  residencePermit: String;
  birthday: DateTimeOutput;
  nationality: String;
  addressStreet: String;
  addressCity: String;
  addressNPA: Int;
  addressCanton: String;
  organisation?: String;
  financialParticipation: FinancialParticipation;
  financialParticipationComment?: String;
  borrowLaptops: Boolean;
  foodCost?: String;
}

export interface StudentPromise extends Promise<Student>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  sexe: () => Promise<Sexe>;
  privateEmail: () => Promise<String>;
  pocoEmail: () => Promise<String>;
  residencePermit: () => Promise<String>;
  birthday: () => Promise<DateTimeOutput>;
  nationality: () => Promise<String>;
  addressStreet: () => Promise<String>;
  addressCity: () => Promise<String>;
  addressNPA: () => Promise<Int>;
  addressCanton: () => Promise<String>;
  organisation: () => Promise<String>;
  socialAssistant: <T = SocialAssistantPromise>() => T;
  financialParticipation: () => Promise<FinancialParticipation>;
  financialParticipationComment: () => Promise<String>;
  borrowLaptops: () => Promise<Boolean>;
  foodCost: () => Promise<String>;
  presences: <T = FragmentableArray<Presence>>(args?: {
    where?: PresenceWhereInput;
    orderBy?: PresenceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  batch: <T = BatchPromise>() => T;
}

export interface StudentSubscription
  extends Promise<AsyncIterator<Student>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  sexe: () => Promise<AsyncIterator<Sexe>>;
  privateEmail: () => Promise<AsyncIterator<String>>;
  pocoEmail: () => Promise<AsyncIterator<String>>;
  residencePermit: () => Promise<AsyncIterator<String>>;
  birthday: () => Promise<AsyncIterator<DateTimeOutput>>;
  nationality: () => Promise<AsyncIterator<String>>;
  addressStreet: () => Promise<AsyncIterator<String>>;
  addressCity: () => Promise<AsyncIterator<String>>;
  addressNPA: () => Promise<AsyncIterator<Int>>;
  addressCanton: () => Promise<AsyncIterator<String>>;
  organisation: () => Promise<AsyncIterator<String>>;
  socialAssistant: <T = SocialAssistantSubscription>() => T;
  financialParticipation: () => Promise<AsyncIterator<FinancialParticipation>>;
  financialParticipationComment: () => Promise<AsyncIterator<String>>;
  borrowLaptops: () => Promise<AsyncIterator<Boolean>>;
  foodCost: () => Promise<AsyncIterator<String>>;
  presences: <T = Promise<AsyncIterator<PresenceSubscription>>>(args?: {
    where?: PresenceWhereInput;
    orderBy?: PresenceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  batch: <T = BatchSubscription>() => T;
}

export interface StudentNullablePromise
  extends Promise<Student | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  sexe: () => Promise<Sexe>;
  privateEmail: () => Promise<String>;
  pocoEmail: () => Promise<String>;
  residencePermit: () => Promise<String>;
  birthday: () => Promise<DateTimeOutput>;
  nationality: () => Promise<String>;
  addressStreet: () => Promise<String>;
  addressCity: () => Promise<String>;
  addressNPA: () => Promise<Int>;
  addressCanton: () => Promise<String>;
  organisation: () => Promise<String>;
  socialAssistant: <T = SocialAssistantPromise>() => T;
  financialParticipation: () => Promise<FinancialParticipation>;
  financialParticipationComment: () => Promise<String>;
  borrowLaptops: () => Promise<Boolean>;
  foodCost: () => Promise<String>;
  presences: <T = FragmentableArray<Presence>>(args?: {
    where?: PresenceWhereInput;
    orderBy?: PresenceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  batch: <T = BatchPromise>() => T;
}

export interface SocialAssistant {
  id: ID_Output;
  firstName: String;
  lastName: String;
  phone?: String;
  email?: String;
}

export interface SocialAssistantPromise
  extends Promise<SocialAssistant>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
}

export interface SocialAssistantSubscription
  extends Promise<AsyncIterator<SocialAssistant>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface SocialAssistantNullablePromise
  extends Promise<SocialAssistant | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
}

export interface PresenceConnection {
  pageInfo: PageInfo;
  edges: PresenceEdge[];
}

export interface PresenceConnectionPromise
  extends Promise<PresenceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PresenceEdge>>() => T;
  aggregate: <T = AggregatePresencePromise>() => T;
}

export interface PresenceConnectionSubscription
  extends Promise<AsyncIterator<PresenceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PresenceEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePresenceSubscription>() => T;
}

export interface PresenceEdge {
  node: Presence;
  cursor: String;
}

export interface PresenceEdgePromise
  extends Promise<PresenceEdge>,
    Fragmentable {
  node: <T = PresencePromise>() => T;
  cursor: () => Promise<String>;
}

export interface PresenceEdgeSubscription
  extends Promise<AsyncIterator<PresenceEdge>>,
    Fragmentable {
  node: <T = PresenceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePresence {
  count: Int;
}

export interface AggregatePresencePromise
  extends Promise<AggregatePresence>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePresenceSubscription
  extends Promise<AsyncIterator<AggregatePresence>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SocialAssistantConnection {
  pageInfo: PageInfo;
  edges: SocialAssistantEdge[];
}

export interface SocialAssistantConnectionPromise
  extends Promise<SocialAssistantConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SocialAssistantEdge>>() => T;
  aggregate: <T = AggregateSocialAssistantPromise>() => T;
}

export interface SocialAssistantConnectionSubscription
  extends Promise<AsyncIterator<SocialAssistantConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SocialAssistantEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSocialAssistantSubscription>() => T;
}

export interface SocialAssistantEdge {
  node: SocialAssistant;
  cursor: String;
}

export interface SocialAssistantEdgePromise
  extends Promise<SocialAssistantEdge>,
    Fragmentable {
  node: <T = SocialAssistantPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SocialAssistantEdgeSubscription
  extends Promise<AsyncIterator<SocialAssistantEdge>>,
    Fragmentable {
  node: <T = SocialAssistantSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSocialAssistant {
  count: Int;
}

export interface AggregateSocialAssistantPromise
  extends Promise<AggregateSocialAssistant>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSocialAssistantSubscription
  extends Promise<AsyncIterator<AggregateSocialAssistant>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StudentConnection {
  pageInfo: PageInfo;
  edges: StudentEdge[];
}

export interface StudentConnectionPromise
  extends Promise<StudentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StudentEdge>>() => T;
  aggregate: <T = AggregateStudentPromise>() => T;
}

export interface StudentConnectionSubscription
  extends Promise<AsyncIterator<StudentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StudentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStudentSubscription>() => T;
}

export interface StudentEdge {
  node: Student;
  cursor: String;
}

export interface StudentEdgePromise extends Promise<StudentEdge>, Fragmentable {
  node: <T = StudentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface StudentEdgeSubscription
  extends Promise<AsyncIterator<StudentEdge>>,
    Fragmentable {
  node: <T = StudentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateStudent {
  count: Int;
}

export interface AggregateStudentPromise
  extends Promise<AggregateStudent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStudentSubscription
  extends Promise<AsyncIterator<AggregateStudent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface BatchSubscriptionPayload {
  mutation: MutationType;
  node: Batch;
  updatedFields: String[];
  previousValues: BatchPreviousValues;
}

export interface BatchSubscriptionPayloadPromise
  extends Promise<BatchSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BatchPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BatchPreviousValuesPromise>() => T;
}

export interface BatchSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BatchSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BatchSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BatchPreviousValuesSubscription>() => T;
}

export interface BatchPreviousValues {
  id: ID_Output;
  name: String;
  startingTime: DateTimeOutput;
  endTime: DateTimeOutput;
}

export interface BatchPreviousValuesPromise
  extends Promise<BatchPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  startingTime: () => Promise<DateTimeOutput>;
  endTime: () => Promise<DateTimeOutput>;
}

export interface BatchPreviousValuesSubscription
  extends Promise<AsyncIterator<BatchPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  startingTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  endTime: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PresenceSubscriptionPayload {
  mutation: MutationType;
  node: Presence;
  updatedFields: String[];
  previousValues: PresencePreviousValues;
}

export interface PresenceSubscriptionPayloadPromise
  extends Promise<PresenceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PresencePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PresencePreviousValuesPromise>() => T;
}

export interface PresenceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PresenceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PresenceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PresencePreviousValuesSubscription>() => T;
}

export interface PresencePreviousValues {
  id: ID_Output;
  dateStart: DateTimeOutput;
  dateEnd: DateTimeOutput;
  goodExcuse?: Boolean;
  reason?: String;
}

export interface PresencePreviousValuesPromise
  extends Promise<PresencePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  dateStart: () => Promise<DateTimeOutput>;
  dateEnd: () => Promise<DateTimeOutput>;
  goodExcuse: () => Promise<Boolean>;
  reason: () => Promise<String>;
}

export interface PresencePreviousValuesSubscription
  extends Promise<AsyncIterator<PresencePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  dateStart: () => Promise<AsyncIterator<DateTimeOutput>>;
  dateEnd: () => Promise<AsyncIterator<DateTimeOutput>>;
  goodExcuse: () => Promise<AsyncIterator<Boolean>>;
  reason: () => Promise<AsyncIterator<String>>;
}

export interface SocialAssistantSubscriptionPayload {
  mutation: MutationType;
  node: SocialAssistant;
  updatedFields: String[];
  previousValues: SocialAssistantPreviousValues;
}

export interface SocialAssistantSubscriptionPayloadPromise
  extends Promise<SocialAssistantSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SocialAssistantPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SocialAssistantPreviousValuesPromise>() => T;
}

export interface SocialAssistantSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SocialAssistantSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SocialAssistantSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SocialAssistantPreviousValuesSubscription>() => T;
}

export interface SocialAssistantPreviousValues {
  id: ID_Output;
  firstName: String;
  lastName: String;
  phone?: String;
  email?: String;
}

export interface SocialAssistantPreviousValuesPromise
  extends Promise<SocialAssistantPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
}

export interface SocialAssistantPreviousValuesSubscription
  extends Promise<AsyncIterator<SocialAssistantPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface StudentSubscriptionPayload {
  mutation: MutationType;
  node: Student;
  updatedFields: String[];
  previousValues: StudentPreviousValues;
}

export interface StudentSubscriptionPayloadPromise
  extends Promise<StudentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StudentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StudentPreviousValuesPromise>() => T;
}

export interface StudentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StudentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StudentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StudentPreviousValuesSubscription>() => T;
}

export interface StudentPreviousValues {
  id: ID_Output;
  firstName: String;
  lastName: String;
  sexe: Sexe;
  privateEmail?: String;
  pocoEmail?: String;
  residencePermit: String;
  birthday: DateTimeOutput;
  nationality: String;
  addressStreet: String;
  addressCity: String;
  addressNPA: Int;
  addressCanton: String;
  organisation?: String;
  financialParticipation: FinancialParticipation;
  financialParticipationComment?: String;
  borrowLaptops: Boolean;
  foodCost?: String;
}

export interface StudentPreviousValuesPromise
  extends Promise<StudentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  sexe: () => Promise<Sexe>;
  privateEmail: () => Promise<String>;
  pocoEmail: () => Promise<String>;
  residencePermit: () => Promise<String>;
  birthday: () => Promise<DateTimeOutput>;
  nationality: () => Promise<String>;
  addressStreet: () => Promise<String>;
  addressCity: () => Promise<String>;
  addressNPA: () => Promise<Int>;
  addressCanton: () => Promise<String>;
  organisation: () => Promise<String>;
  financialParticipation: () => Promise<FinancialParticipation>;
  financialParticipationComment: () => Promise<String>;
  borrowLaptops: () => Promise<Boolean>;
  foodCost: () => Promise<String>;
}

export interface StudentPreviousValuesSubscription
  extends Promise<AsyncIterator<StudentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  sexe: () => Promise<AsyncIterator<Sexe>>;
  privateEmail: () => Promise<AsyncIterator<String>>;
  pocoEmail: () => Promise<AsyncIterator<String>>;
  residencePermit: () => Promise<AsyncIterator<String>>;
  birthday: () => Promise<AsyncIterator<DateTimeOutput>>;
  nationality: () => Promise<AsyncIterator<String>>;
  addressStreet: () => Promise<AsyncIterator<String>>;
  addressCity: () => Promise<AsyncIterator<String>>;
  addressNPA: () => Promise<AsyncIterator<Int>>;
  addressCanton: () => Promise<AsyncIterator<String>>;
  organisation: () => Promise<AsyncIterator<String>>;
  financialParticipation: () => Promise<AsyncIterator<FinancialParticipation>>;
  financialParticipationComment: () => Promise<AsyncIterator<String>>;
  borrowLaptops: () => Promise<AsyncIterator<Boolean>>;
  foodCost: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Student",
    embedded: false
  },
  {
    name: "SocialAssistant",
    embedded: false
  },
  {
    name: "Batch",
    embedded: false
  },
  {
    name: "FinancialParticipation",
    embedded: false
  },
  {
    name: "Sexe",
    embedded: false
  },
  {
    name: "Presence",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466/poco`
});
export const prisma = new Prisma();
