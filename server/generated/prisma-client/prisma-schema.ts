// Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type Absence {
  id: ID!
  date: DateTime!
  timeMissed: DateTime!
  goodExcuse: Boolean!
  reason: String
}

type AbsenceConnection {
  pageInfo: PageInfo!
  edges: [AbsenceEdge]!
  aggregate: AggregateAbsence!
}

input AbsenceCreateInput {
  id: ID
  date: DateTime!
  timeMissed: DateTime!
  goodExcuse: Boolean!
  reason: String
}

input AbsenceCreateManyInput {
  create: [AbsenceCreateInput!]
  connect: [AbsenceWhereUniqueInput!]
}

type AbsenceEdge {
  node: Absence!
  cursor: String!
}

enum AbsenceOrderByInput {
  id_ASC
  id_DESC
  date_ASC
  date_DESC
  timeMissed_ASC
  timeMissed_DESC
  goodExcuse_ASC
  goodExcuse_DESC
  reason_ASC
  reason_DESC
}

type AbsencePreviousValues {
  id: ID!
  date: DateTime!
  timeMissed: DateTime!
  goodExcuse: Boolean!
  reason: String
}

input AbsenceScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  timeMissed: DateTime
  timeMissed_not: DateTime
  timeMissed_in: [DateTime!]
  timeMissed_not_in: [DateTime!]
  timeMissed_lt: DateTime
  timeMissed_lte: DateTime
  timeMissed_gt: DateTime
  timeMissed_gte: DateTime
  goodExcuse: Boolean
  goodExcuse_not: Boolean
  reason: String
  reason_not: String
  reason_in: [String!]
  reason_not_in: [String!]
  reason_lt: String
  reason_lte: String
  reason_gt: String
  reason_gte: String
  reason_contains: String
  reason_not_contains: String
  reason_starts_with: String
  reason_not_starts_with: String
  reason_ends_with: String
  reason_not_ends_with: String
  AND: [AbsenceScalarWhereInput!]
  OR: [AbsenceScalarWhereInput!]
  NOT: [AbsenceScalarWhereInput!]
}

type AbsenceSubscriptionPayload {
  mutation: MutationType!
  node: Absence
  updatedFields: [String!]
  previousValues: AbsencePreviousValues
}

input AbsenceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AbsenceWhereInput
  AND: [AbsenceSubscriptionWhereInput!]
  OR: [AbsenceSubscriptionWhereInput!]
  NOT: [AbsenceSubscriptionWhereInput!]
}

input AbsenceUpdateDataInput {
  date: DateTime
  timeMissed: DateTime
  goodExcuse: Boolean
  reason: String
}

input AbsenceUpdateInput {
  date: DateTime
  timeMissed: DateTime
  goodExcuse: Boolean
  reason: String
}

input AbsenceUpdateManyDataInput {
  date: DateTime
  timeMissed: DateTime
  goodExcuse: Boolean
  reason: String
}

input AbsenceUpdateManyInput {
  create: [AbsenceCreateInput!]
  update: [AbsenceUpdateWithWhereUniqueNestedInput!]
  upsert: [AbsenceUpsertWithWhereUniqueNestedInput!]
  delete: [AbsenceWhereUniqueInput!]
  connect: [AbsenceWhereUniqueInput!]
  set: [AbsenceWhereUniqueInput!]
  disconnect: [AbsenceWhereUniqueInput!]
  deleteMany: [AbsenceScalarWhereInput!]
  updateMany: [AbsenceUpdateManyWithWhereNestedInput!]
}

input AbsenceUpdateManyMutationInput {
  date: DateTime
  timeMissed: DateTime
  goodExcuse: Boolean
  reason: String
}

input AbsenceUpdateManyWithWhereNestedInput {
  where: AbsenceScalarWhereInput!
  data: AbsenceUpdateManyDataInput!
}

input AbsenceUpdateWithWhereUniqueNestedInput {
  where: AbsenceWhereUniqueInput!
  data: AbsenceUpdateDataInput!
}

input AbsenceUpsertWithWhereUniqueNestedInput {
  where: AbsenceWhereUniqueInput!
  update: AbsenceUpdateDataInput!
  create: AbsenceCreateInput!
}

input AbsenceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  timeMissed: DateTime
  timeMissed_not: DateTime
  timeMissed_in: [DateTime!]
  timeMissed_not_in: [DateTime!]
  timeMissed_lt: DateTime
  timeMissed_lte: DateTime
  timeMissed_gt: DateTime
  timeMissed_gte: DateTime
  goodExcuse: Boolean
  goodExcuse_not: Boolean
  reason: String
  reason_not: String
  reason_in: [String!]
  reason_not_in: [String!]
  reason_lt: String
  reason_lte: String
  reason_gt: String
  reason_gte: String
  reason_contains: String
  reason_not_contains: String
  reason_starts_with: String
  reason_not_starts_with: String
  reason_ends_with: String
  reason_not_ends_with: String
  AND: [AbsenceWhereInput!]
  OR: [AbsenceWhereInput!]
  NOT: [AbsenceWhereInput!]
}

input AbsenceWhereUniqueInput {
  id: ID
}

type AggregateAbsence {
  count: Int!
}

type AggregateSocialAssistant {
  count: Int!
}

type AggregateStudent {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

enum FinancialParticipation {
  YES
  NO
  EXTERN
  OTHER
}

scalar Long

type Mutation {
  createAbsence(data: AbsenceCreateInput!): Absence!
  updateAbsence(data: AbsenceUpdateInput!, where: AbsenceWhereUniqueInput!): Absence
  updateManyAbsences(data: AbsenceUpdateManyMutationInput!, where: AbsenceWhereInput): BatchPayload!
  upsertAbsence(where: AbsenceWhereUniqueInput!, create: AbsenceCreateInput!, update: AbsenceUpdateInput!): Absence!
  deleteAbsence(where: AbsenceWhereUniqueInput!): Absence
  deleteManyAbsences(where: AbsenceWhereInput): BatchPayload!
  createSocialAssistant(data: SocialAssistantCreateInput!): SocialAssistant!
  updateSocialAssistant(data: SocialAssistantUpdateInput!, where: SocialAssistantWhereUniqueInput!): SocialAssistant
  updateManySocialAssistants(data: SocialAssistantUpdateManyMutationInput!, where: SocialAssistantWhereInput): BatchPayload!
  upsertSocialAssistant(where: SocialAssistantWhereUniqueInput!, create: SocialAssistantCreateInput!, update: SocialAssistantUpdateInput!): SocialAssistant!
  deleteSocialAssistant(where: SocialAssistantWhereUniqueInput!): SocialAssistant
  deleteManySocialAssistants(where: SocialAssistantWhereInput): BatchPayload!
  createStudent(data: StudentCreateInput!): Student!
  updateStudent(data: StudentUpdateInput!, where: StudentWhereUniqueInput!): Student
  updateManyStudents(data: StudentUpdateManyMutationInput!, where: StudentWhereInput): BatchPayload!
  upsertStudent(where: StudentWhereUniqueInput!, create: StudentCreateInput!, update: StudentUpdateInput!): Student!
  deleteStudent(where: StudentWhereUniqueInput!): Student
  deleteManyStudents(where: StudentWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  absence(where: AbsenceWhereUniqueInput!): Absence
  absences(where: AbsenceWhereInput, orderBy: AbsenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Absence]!
  absencesConnection(where: AbsenceWhereInput, orderBy: AbsenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AbsenceConnection!
  socialAssistant(where: SocialAssistantWhereUniqueInput!): SocialAssistant
  socialAssistants(where: SocialAssistantWhereInput, orderBy: SocialAssistantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SocialAssistant]!
  socialAssistantsConnection(where: SocialAssistantWhereInput, orderBy: SocialAssistantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SocialAssistantConnection!
  student(where: StudentWhereUniqueInput!): Student
  students(where: StudentWhereInput, orderBy: StudentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Student]!
  studentsConnection(where: StudentWhereInput, orderBy: StudentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StudentConnection!
  node(id: ID!): Node
}

enum Sexe {
  MALE
  FEMAIL
  OTHER
}

type SocialAssistant {
  id: ID!
  firstName: String!
  lastName: String!
  phone: String
  email: String
}

type SocialAssistantConnection {
  pageInfo: PageInfo!
  edges: [SocialAssistantEdge]!
  aggregate: AggregateSocialAssistant!
}

input SocialAssistantCreateInput {
  id: ID
  firstName: String!
  lastName: String!
  phone: String
  email: String
}

input SocialAssistantCreateOneInput {
  create: SocialAssistantCreateInput
  connect: SocialAssistantWhereUniqueInput
}

type SocialAssistantEdge {
  node: SocialAssistant!
  cursor: String!
}

enum SocialAssistantOrderByInput {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  phone_ASC
  phone_DESC
  email_ASC
  email_DESC
}

type SocialAssistantPreviousValues {
  id: ID!
  firstName: String!
  lastName: String!
  phone: String
  email: String
}

type SocialAssistantSubscriptionPayload {
  mutation: MutationType!
  node: SocialAssistant
  updatedFields: [String!]
  previousValues: SocialAssistantPreviousValues
}

input SocialAssistantSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SocialAssistantWhereInput
  AND: [SocialAssistantSubscriptionWhereInput!]
  OR: [SocialAssistantSubscriptionWhereInput!]
  NOT: [SocialAssistantSubscriptionWhereInput!]
}

input SocialAssistantUpdateDataInput {
  firstName: String
  lastName: String
  phone: String
  email: String
}

input SocialAssistantUpdateInput {
  firstName: String
  lastName: String
  phone: String
  email: String
}

input SocialAssistantUpdateManyMutationInput {
  firstName: String
  lastName: String
  phone: String
  email: String
}

input SocialAssistantUpdateOneInput {
  create: SocialAssistantCreateInput
  update: SocialAssistantUpdateDataInput
  upsert: SocialAssistantUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: SocialAssistantWhereUniqueInput
}

input SocialAssistantUpsertNestedInput {
  update: SocialAssistantUpdateDataInput!
  create: SocialAssistantCreateInput!
}

input SocialAssistantWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  AND: [SocialAssistantWhereInput!]
  OR: [SocialAssistantWhereInput!]
  NOT: [SocialAssistantWhereInput!]
}

input SocialAssistantWhereUniqueInput {
  id: ID
}

type Student {
  id: ID!
  firstName: String!
  lastName: String!
  sexe: Sexe!
  privateEmail: String
  pocoEmail: String
  residencePermit: String!
  birthday: DateTime!
  nationality: String!
  addressStreet: String!
  addressCity: String!
  addressNPA: String!
  addressCanton: String!
  organisation: String
  socialAssistant: SocialAssistant
  financialParticipation: FinancialParticipation!
  financialParticipationComment: String
  borrowLaptops: Boolean!
  FoodCost: String
  absences(where: AbsenceWhereInput, orderBy: AbsenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Absence!]
  createDate: DateTime!
  updateDate: DateTime!
}

type StudentConnection {
  pageInfo: PageInfo!
  edges: [StudentEdge]!
  aggregate: AggregateStudent!
}

input StudentCreateInput {
  id: ID
  firstName: String!
  lastName: String!
  sexe: Sexe!
  privateEmail: String
  pocoEmail: String
  residencePermit: String!
  birthday: DateTime!
  nationality: String!
  addressStreet: String!
  addressCity: String!
  addressNPA: String!
  addressCanton: String!
  organisation: String
  socialAssistant: SocialAssistantCreateOneInput
  financialParticipation: FinancialParticipation!
  financialParticipationComment: String
  borrowLaptops: Boolean!
  FoodCost: String
  absences: AbsenceCreateManyInput
  createDate: DateTime!
  updateDate: DateTime!
}

type StudentEdge {
  node: Student!
  cursor: String!
}

enum StudentOrderByInput {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  sexe_ASC
  sexe_DESC
  privateEmail_ASC
  privateEmail_DESC
  pocoEmail_ASC
  pocoEmail_DESC
  residencePermit_ASC
  residencePermit_DESC
  birthday_ASC
  birthday_DESC
  nationality_ASC
  nationality_DESC
  addressStreet_ASC
  addressStreet_DESC
  addressCity_ASC
  addressCity_DESC
  addressNPA_ASC
  addressNPA_DESC
  addressCanton_ASC
  addressCanton_DESC
  organisation_ASC
  organisation_DESC
  financialParticipation_ASC
  financialParticipation_DESC
  financialParticipationComment_ASC
  financialParticipationComment_DESC
  borrowLaptops_ASC
  borrowLaptops_DESC
  FoodCost_ASC
  FoodCost_DESC
  createDate_ASC
  createDate_DESC
  updateDate_ASC
  updateDate_DESC
}

type StudentPreviousValues {
  id: ID!
  firstName: String!
  lastName: String!
  sexe: Sexe!
  privateEmail: String
  pocoEmail: String
  residencePermit: String!
  birthday: DateTime!
  nationality: String!
  addressStreet: String!
  addressCity: String!
  addressNPA: String!
  addressCanton: String!
  organisation: String
  financialParticipation: FinancialParticipation!
  financialParticipationComment: String
  borrowLaptops: Boolean!
  FoodCost: String
  createDate: DateTime!
  updateDate: DateTime!
}

type StudentSubscriptionPayload {
  mutation: MutationType!
  node: Student
  updatedFields: [String!]
  previousValues: StudentPreviousValues
}

input StudentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: StudentWhereInput
  AND: [StudentSubscriptionWhereInput!]
  OR: [StudentSubscriptionWhereInput!]
  NOT: [StudentSubscriptionWhereInput!]
}

input StudentUpdateInput {
  firstName: String
  lastName: String
  sexe: Sexe
  privateEmail: String
  pocoEmail: String
  residencePermit: String
  birthday: DateTime
  nationality: String
  addressStreet: String
  addressCity: String
  addressNPA: String
  addressCanton: String
  organisation: String
  socialAssistant: SocialAssistantUpdateOneInput
  financialParticipation: FinancialParticipation
  financialParticipationComment: String
  borrowLaptops: Boolean
  FoodCost: String
  absences: AbsenceUpdateManyInput
  createDate: DateTime
  updateDate: DateTime
}

input StudentUpdateManyMutationInput {
  firstName: String
  lastName: String
  sexe: Sexe
  privateEmail: String
  pocoEmail: String
  residencePermit: String
  birthday: DateTime
  nationality: String
  addressStreet: String
  addressCity: String
  addressNPA: String
  addressCanton: String
  organisation: String
  financialParticipation: FinancialParticipation
  financialParticipationComment: String
  borrowLaptops: Boolean
  FoodCost: String
  createDate: DateTime
  updateDate: DateTime
}

input StudentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  sexe: Sexe
  sexe_not: Sexe
  sexe_in: [Sexe!]
  sexe_not_in: [Sexe!]
  privateEmail: String
  privateEmail_not: String
  privateEmail_in: [String!]
  privateEmail_not_in: [String!]
  privateEmail_lt: String
  privateEmail_lte: String
  privateEmail_gt: String
  privateEmail_gte: String
  privateEmail_contains: String
  privateEmail_not_contains: String
  privateEmail_starts_with: String
  privateEmail_not_starts_with: String
  privateEmail_ends_with: String
  privateEmail_not_ends_with: String
  pocoEmail: String
  pocoEmail_not: String
  pocoEmail_in: [String!]
  pocoEmail_not_in: [String!]
  pocoEmail_lt: String
  pocoEmail_lte: String
  pocoEmail_gt: String
  pocoEmail_gte: String
  pocoEmail_contains: String
  pocoEmail_not_contains: String
  pocoEmail_starts_with: String
  pocoEmail_not_starts_with: String
  pocoEmail_ends_with: String
  pocoEmail_not_ends_with: String
  residencePermit: String
  residencePermit_not: String
  residencePermit_in: [String!]
  residencePermit_not_in: [String!]
  residencePermit_lt: String
  residencePermit_lte: String
  residencePermit_gt: String
  residencePermit_gte: String
  residencePermit_contains: String
  residencePermit_not_contains: String
  residencePermit_starts_with: String
  residencePermit_not_starts_with: String
  residencePermit_ends_with: String
  residencePermit_not_ends_with: String
  birthday: DateTime
  birthday_not: DateTime
  birthday_in: [DateTime!]
  birthday_not_in: [DateTime!]
  birthday_lt: DateTime
  birthday_lte: DateTime
  birthday_gt: DateTime
  birthday_gte: DateTime
  nationality: String
  nationality_not: String
  nationality_in: [String!]
  nationality_not_in: [String!]
  nationality_lt: String
  nationality_lte: String
  nationality_gt: String
  nationality_gte: String
  nationality_contains: String
  nationality_not_contains: String
  nationality_starts_with: String
  nationality_not_starts_with: String
  nationality_ends_with: String
  nationality_not_ends_with: String
  addressStreet: String
  addressStreet_not: String
  addressStreet_in: [String!]
  addressStreet_not_in: [String!]
  addressStreet_lt: String
  addressStreet_lte: String
  addressStreet_gt: String
  addressStreet_gte: String
  addressStreet_contains: String
  addressStreet_not_contains: String
  addressStreet_starts_with: String
  addressStreet_not_starts_with: String
  addressStreet_ends_with: String
  addressStreet_not_ends_with: String
  addressCity: String
  addressCity_not: String
  addressCity_in: [String!]
  addressCity_not_in: [String!]
  addressCity_lt: String
  addressCity_lte: String
  addressCity_gt: String
  addressCity_gte: String
  addressCity_contains: String
  addressCity_not_contains: String
  addressCity_starts_with: String
  addressCity_not_starts_with: String
  addressCity_ends_with: String
  addressCity_not_ends_with: String
  addressNPA: String
  addressNPA_not: String
  addressNPA_in: [String!]
  addressNPA_not_in: [String!]
  addressNPA_lt: String
  addressNPA_lte: String
  addressNPA_gt: String
  addressNPA_gte: String
  addressNPA_contains: String
  addressNPA_not_contains: String
  addressNPA_starts_with: String
  addressNPA_not_starts_with: String
  addressNPA_ends_with: String
  addressNPA_not_ends_with: String
  addressCanton: String
  addressCanton_not: String
  addressCanton_in: [String!]
  addressCanton_not_in: [String!]
  addressCanton_lt: String
  addressCanton_lte: String
  addressCanton_gt: String
  addressCanton_gte: String
  addressCanton_contains: String
  addressCanton_not_contains: String
  addressCanton_starts_with: String
  addressCanton_not_starts_with: String
  addressCanton_ends_with: String
  addressCanton_not_ends_with: String
  organisation: String
  organisation_not: String
  organisation_in: [String!]
  organisation_not_in: [String!]
  organisation_lt: String
  organisation_lte: String
  organisation_gt: String
  organisation_gte: String
  organisation_contains: String
  organisation_not_contains: String
  organisation_starts_with: String
  organisation_not_starts_with: String
  organisation_ends_with: String
  organisation_not_ends_with: String
  socialAssistant: SocialAssistantWhereInput
  financialParticipation: FinancialParticipation
  financialParticipation_not: FinancialParticipation
  financialParticipation_in: [FinancialParticipation!]
  financialParticipation_not_in: [FinancialParticipation!]
  financialParticipationComment: String
  financialParticipationComment_not: String
  financialParticipationComment_in: [String!]
  financialParticipationComment_not_in: [String!]
  financialParticipationComment_lt: String
  financialParticipationComment_lte: String
  financialParticipationComment_gt: String
  financialParticipationComment_gte: String
  financialParticipationComment_contains: String
  financialParticipationComment_not_contains: String
  financialParticipationComment_starts_with: String
  financialParticipationComment_not_starts_with: String
  financialParticipationComment_ends_with: String
  financialParticipationComment_not_ends_with: String
  borrowLaptops: Boolean
  borrowLaptops_not: Boolean
  FoodCost: String
  FoodCost_not: String
  FoodCost_in: [String!]
  FoodCost_not_in: [String!]
  FoodCost_lt: String
  FoodCost_lte: String
  FoodCost_gt: String
  FoodCost_gte: String
  FoodCost_contains: String
  FoodCost_not_contains: String
  FoodCost_starts_with: String
  FoodCost_not_starts_with: String
  FoodCost_ends_with: String
  FoodCost_not_ends_with: String
  absences_every: AbsenceWhereInput
  absences_some: AbsenceWhereInput
  absences_none: AbsenceWhereInput
  createDate: DateTime
  createDate_not: DateTime
  createDate_in: [DateTime!]
  createDate_not_in: [DateTime!]
  createDate_lt: DateTime
  createDate_lte: DateTime
  createDate_gt: DateTime
  createDate_gte: DateTime
  updateDate: DateTime
  updateDate_not: DateTime
  updateDate_in: [DateTime!]
  updateDate_not_in: [DateTime!]
  updateDate_lt: DateTime
  updateDate_lte: DateTime
  updateDate_gt: DateTime
  updateDate_gte: DateTime
  AND: [StudentWhereInput!]
  OR: [StudentWhereInput!]
  NOT: [StudentWhereInput!]
}

input StudentWhereUniqueInput {
  id: ID
}

type Subscription {
  absence(where: AbsenceSubscriptionWhereInput): AbsenceSubscriptionPayload
  socialAssistant(where: SocialAssistantSubscriptionWhereInput): SocialAssistantSubscriptionPayload
  student(where: StudentSubscriptionWhereInput): StudentSubscriptionPayload
}
`